import urllib
import urllib.request
import math
import winreg
import datetime
from enum import Enum,unique




#tradingDay API中时间频率类型枚举值
@unique
class FrequencyType(Enum):
    DAY=1      #日
    WEEK    =2     #周
    MONTH   =3     #月
    QUARTER =4     #季
    HALFYEAR=5     #半年
    YEAR    =6     #年

#tradingDay API中日期类型枚举值
@unique
class DayType(Enum):
    MONDAY   = 1     #周一
    TUESDAY  = 2     #周二
    WEDNESDAY= 3     #周三
    THURSDAY = 4     #周四
    FRIDAY   = 5     #周五
    SATURDAY = 6     #周六
    SUNDAY   = 7     #周日
    FIRSTDAY = 8     #首日
    LASTDAY  = 9     #最后一日

#tradingDay API中日期性质枚举值
@unique
class DateType(Enum):
    ALLDAYS   = 1     #所有自然日
    TRADINGDAYS  = 2  #交易日

#货币类型枚举值
@unique
class CurrencyType(Enum):
    RMB = 1     #人民币
    USD = 2     #美元
    HKD = 3     #港币

#股利计算基准时间枚举值,,1 = 以除权出息日为基期, 2 = 以派息日为基期
DivdendDateType = Enum('DivdendDateType',('EXDISTDT', 'DIVDT'))

#行业代码类型枚举值 ,1 = 证监会行业分类,2 = 中信行业分类,3 = 申万行业分类
@unique
class IndustryType(Enum):
    CSRC = 1     #证监会分类
    CITICS = 2     #中信证券分类
    SW = 3     #申万证券分类

#在策略回测的时候，用于撮合匹配的价格类型,1 = 交易量加权平均价,2 = 收盘价,3 = 开盘价,4 = 最高价,5 = 最低价
@unique
class MatchPriceType(Enum):
    VWAP  = 1     #交易量加权平均价
    CLOSE = 2     #收盘价
    OPEN  = 3     #开盘价
    HIGH  = 4     #最高价
    LOW   = 5     #最低价

#hset API专用板块类型枚举值,1 = 自定义板块,2 = 指数板块,3 = 市场板块,4 = 行业板块
@unique
class PlateType(Enum):
    SECTOR   = 1     #自定义板块
    INDEX  = 2     #指数板块
    MARKET= 3     #市场板块
    INDUSTRY = 4     #行业板块

#价格类型枚举值,1 = 不复权价格, 2 = 前复权价格, 3 = 后复权价格
@unique
class PriceType(Enum):
    UNADJUSTED   = 1     #不复权价格
    FORWARD  = 2     #前复权价格
    BACKWARD= 3     #后复权价格

#财务报表披露日期类型枚举值,1 = 会计日期,2 = 披露日期,3 = 按照披露日期计算的过去12个月财务数据
@unique
class PublishDateType(Enum):
    ACCOUNTINGDAY   = 1     #不复权价格
    PUBLISHDAY  = 2     #前复权价格
    TTM= 3     #后复权价格


#指数类型枚举值
@unique
class IndexType(Enum):
    HS300 = 1     #沪深300指数
    ZZ500 = 2     #中证500指数
    SH50 = 21    #上证50指数
    ZZ1000 = 22  #中证1000指数

#从披露日期角度划分的财务报表类型枚举值
@unique
class ReportDateType(Enum):
    Q1 =11      #一季报
    HY =12      #中报
    Q3 =13      #三季报
    AN =14      #年报
    ALL =10      #所有定期报告，包括Q1,HY，Q2，AN

#从编制角度划分的财务报表类型枚举值
@unique
class ReportType(Enum):
    COMBINED    =1      #数据库中数值 = 408001000:合并报表
    COMBINED_SS =2      #数据库中数值 = 408002000:合并报表(单季度
    COMBINED_SSA=3      #数据库中数值 = 408003000:合并报表(单季度调整
    COMBINED_A  =4      #数据库中数值 = 408004000:合并报表(调整
    COMBINED_NM =5      #数据库中数值 = 408005000:合并报表(更正前
    PARENT      =6      #数据库中数值 = 408006000:母公司报表
    PARENT_SS   =7      #数据库中数值 = 408007000:母公司报表(单季度
    PARENT_SSA  =8      #数据库中数值 = 408008000:母公司报表(单季度调整
    PARENT_A    =9      #数据库中数值 = 408009000:母公司报表(调整
    PARENT_NM   =10     #数据库中数值 = 408010000:母公司报表(更正前

#绩效年化收益类型枚举值,1= 单利,2 = 复利
ReturnType = Enum('ReturnType',('SIMPLE','COMPOUND'))

#股票过滤类型
@unique
class StockFilterType(Enum):
    STPT     =1      #特别处理特殊处理
    SUSPEND      =2      #停牌
    OPENUPLIMIT  =3      #开盘涨停
    OPENDOWNLIMIT=4      #开盘跌停
    SSO      =10     #特别处理特殊处理 + 停牌 + 开盘涨停
    STSPEND      =11     #特别处理特殊处理 + 停牌
    STUP     =12     #特别处理特殊处理 + 开盘涨停
    STDOWN       =13     #特别处理特殊处理 + 开盘跌停
    UPSPEND      =14     #停牌 + 开盘涨停
    DNSPWND      =15     #停牌 + 开盘跌停

#策略运行类型枚举值
#1 = 历史回测，用历史数据进行日频、高频测试,2 = 实时仿真交易，实时行情环境下，仿真撮合验证策略绩效,3 = 实盘交易，对接真实的交易账户，真实交易所交易
TradingType = Enum('TradingType',('BACKTEST','DEMOTRADING','REALTRADING'))    

#市场类型枚举
@unique
class  MarketType(Enum):
    ALLA = 0       #全部A股
    SHA  = 1       #上海A股
    SZA  = 2       #深圳A股
    SME  = 3       #中小板
    GEM  = 4       #创业板
    SH   = 101     #上海证券交易所
    SZ   = 105     #深圳证券交易所

#因子参数类型枚举值
@unique
class  FactorType(Enum):
    UNADJUSTED     =1       #不复权价格
    FORWARD    =2       #前复权价格
    BACKWARD       =3       #后复权价格
    COMBINED       =11      #合并报表
    COMBINED_SS    =12      #合并报表(单季度
    COMBINED_SSA   =13      #合并报表(单季度调整
    COMBINED_A     =14      #合并报表(调整
    COMBINED_NM    =15      #合并报表(更正前
    PARENT     =16      #母公司报表
    PARENT_SS      =17      #母公司报表(单季度
    PARENT_SSA     =18      #母公司报表(单季度调整
    PARENT_A       =19      #母公司报表(调整
    PARENT_NM      =20      #母公司报表(更正前
    EXDISTDT       =31      #以除权出息日为基期，数据库中值为1
    DIVDT      =32      #以派息日为基期，数据库中值为2
    CESTOCK    =51       #股票
    CEINDEX    =52        #指数
    CEINDUSTRY       =54        #行业
    CEHS300    =55        #沪深300行业
    CESH180    =56        #上证180行业
    CESH015    =57        #红利指数行业
    CESH050    =58        #上证50行业
    CEZZ100    =59        #中证100行业
    CESZ100    =60        #深证100行业
    CESZ101    =61        #中小板综合指数
    CEJC040    =62        #巨潮40行业
    CEJC300    =63        #巨潮300行业
    CEJC100    =64        #巨潮100行业
    CEZB300    =65        #中标300行业
    CEZB050    =66        #中标50行业
    CEXF050    =67        #新富A50行业
    CEDZ088    =68        #道中88行业
    CESH001    =69        #上证A股行业
    CESH043    =70        #超大盘行业
    CEZZ500    =71        #中证500行业
    CEZZ700    =72        #中证700行业
    CESZ005    =73        #中小板指行业
    CESZ006    =74        #创业板指数行业
    CESH067    =75        #上证新兴行业
    CEZZ800    =76        #中证800行业
    CEQ1       =81        #一致预期一季报
    CEHY       =82        #一致预期中报
    CEQ3       =83        #一致预期三季报
    CEAN       =84        #一致预期年报
    CEM0       =90        #一致预期:真实财务数据
    CEM1       =91        #一致预期:加权计算
    CEM2       =92        #一致预期:手工估算
    CEM3       =93        #一致预期:数据模拟
    CEM4       =94        #一致预期:沿用数据

#中信行业分类枚举值
@unique
class CITICS(Enum):
    b101 = 1001    #石油石化
    b102 = 1002    #煤炭
    b103 = 1003    #有色金属
    b104 = 1004    #电力及公用事业
    b105 = 1005    #钢铁
    b106 = 1006    #基础化工
    b107 = 1007    #建筑
    b108 = 1008    #建材
    b109 = 1009    #轻工制造
    b10a = 1010    #机械
    b10b = 1011    #电力设备
    b10c = 1012    #国防军工
    b10d = 1013    #汽车
    b10e = 1014    #商贸零售
    b10f = 1015    #餐饮旅游
    b10g = 1016    #家电
    b10h = 1017    #纺织服装
    b10i = 1018    #医药
    b10j = 1019    #食品饮料
    b10k = 1020    #农林牧渔
    b10l = 1021    #银行
    b10m = 1022    #非银行金融
    b10n = 1023    #房地产
    b10o = 1024    #交通运输
    b10p = 1025    #电子元器件
    b10q = 1026    #通信
    b10r = 1027    #计算机
    b10s = 1028    #传媒
    b10t = 1029    #综合
    b10101 = 1030    #石油开采Ⅱ
    b10102 = 1031    #石油化工
    b10103 = 1032    #油田服务Ⅱ
    b10201 = 1033    #煤炭开采洗选
    b10202 = 1034    #煤炭化工
    b10301 = 1035    #贵金属
    b10302 = 1036    #工业金属
    b10303 = 1037    #稀有金属Ⅱ
    b10401 = 1038    #发电及电网
    b10402 = 1039    #环保及公用事业
    b10501 = 1040    #普钢
    b10502 = 1041    #其他钢铁
    b10601 = 1042    #农用化工
    b10602 = 1043    #合成纤维及树脂
    b10603 = 1044    #化学原料
    b10604 = 1045    #化学制品
    b10701 = 1046    #建筑施工Ⅱ
    b10702 = 1047    #建筑装修Ⅱ
    b10801 = 1048    #水泥Ⅱ
    b10802 = 1049    #玻璃Ⅱ
    b10803 = 1050    #其他建材
    b10901 = 1051    #造纸Ⅱ
    b10902 = 1052    #其他轻工Ⅱ
    b10a01 = 1053    #工程机械Ⅱ
    b10a02 = 1054    #其他专用设备
    b10a03 = 1055    #通用设备
    b10a04 = 1056    #运输设备
    b10a05 = 1057    #仪器仪表Ⅱ
    b10a06 = 1058    #金属制品Ⅱ
    b10b01 = 1059    #电站设备Ⅱ
    b10b02 = 1060    #输变电设备
    b10b03 = 1061    #新能源设备
    b10c01 = 1062    #航空航天
    b10c02 = 1063    #兵器兵装Ⅱ
    b10c03 = 1064    #其他军工Ⅱ
    b10d01 = 1065    #乘用车Ⅱ
    b10d02 = 1066    #商用车
    b10d03 = 1067    #汽车零部件Ⅱ
    b10d04 = 1068    #汽车销售及服务Ⅱ
    b10d05 = 1069    #摩托车及其他Ⅱ
    b10e01 = 1070    #零售
    b10e02 = 1071    #贸易Ⅱ
    b10f01 = 1072    #景区和旅行社
    b10f02 = 1073    #酒店及餐饮
    b10g01 = 1074    #白色家电Ⅱ
    b10g02 = 1075    #黑色家电Ⅱ
    b10g03 = 1076    #小家电Ⅱ
    b10g04 = 1077    #照明设备及其他
    b10h04 = 1078    #纺织制造
    b10h05 = 1079    #品牌服饰
    b10i01 = 1080    #化学制药
    b10i02 = 1081    #中药生产
    b10i03 = 1082    #生物医药Ⅱ
    b10i04 = 1083    #其他医药医疗
    b10j01 = 1084    #白酒Ⅱ
    b10j02 = 1085    #其他饮料Ⅱ
    b10j03 = 1086    #食品
    b10k01 = 1087    #农业
    b10k02 = 1088    #牧业
    b10k03 = 1089    #林业
    b10k04 = 1090    #渔业
    b10l01 = 1091    #国有银行Ⅱ
    b10l02 = 1092    #股份制与城商行
    b10m01 = 1093    #证券Ⅱ
    b10m02 = 1094    #保险Ⅱ
    b10m03 = 1095    #信托及其他
    b10n01 = 1096    #房地产开发管理
    b10n02 = 1097    #房地产服务Ⅱ
    b10o01 = 1098    #公路铁路
    b10o02 = 1099    #公交物流
    b10o03 = 1100    #航运港口
    b10o04 = 1101    #航空机场
    b10p01 = 1102    #半导体Ⅱ
    b10p02 = 1103    #电子设备Ⅱ
    b10p03 = 1104    #其他元器件Ⅱ
    b10q01 = 1105    #电信运营Ⅱ
    b10q02 = 1106    #通信设备制造
    b10q03 = 1107    #增值服务Ⅱ
    b10r01 = 1108    #计算机硬件
    b10r02 = 1109    #计算机软件
    b10r03 = 1110    #IT服务
    b10s01 = 1111    #传媒Ⅱ
    b10t01 = 1112    #综合Ⅱ
    b1010101 = 1113    #石油开采Ⅲ
    b1010201 = 1114    #炼油
    b1010204 = 1115    #油品销售及仓储
    b1010205 = 1116    #其他石化
    b1010301 = 1117    #油田服务Ⅲ
    b1020101 = 1118    #动力煤
    b1020102 = 1119    #无烟煤
    b1020103 = 1120    #炼焦煤
    b1020201 = 1121    #焦炭
    b1030101 = 1122    #黄金
    b1030201 = 1123    #铜
    b1030202 = 1124    #铅锌
    b1030203 = 1125    #镍钴
    b1030204 = 1126    #锡锑
    b1030205 = 1127    #铝
    b1030301 = 1128    #稀有金属Ⅲ
    b1040101 = 1129    #火电
    b1040102 = 1130    #水电
    b1040104 = 1131    #电网
    b1040201 = 1132    #环保
    b1040202 = 1133    #水务
    b1040203 = 1134    #燃气
    b1040204 = 1135    #供热或其他
    b1050101 = 1136    #长材
    b1050102 = 1137    #板材
    b1050201 = 1138    #特钢
    b1050202 = 1139    #铁矿石
    b1050203 = 1140    #贸易流通
    b1060101 = 1141    #氮肥
    b1060102 = 1142    #钾肥
    b1060103 = 1143    #磷肥
    b1060104 = 1144    #复合肥
    b1060105 = 1145    #农药
    b1060201 = 1146    #涤纶
    b1060203 = 1147    #氨纶
    b1060204 = 1148    #粘胶
    b1060205 = 1149    #绵纶
    b1060206 = 1150    #树脂
    b1060301 = 1151    #纯碱
    b1060302 = 1152    #氯碱
    b1060303 = 1153    #无机盐
    b1060304 = 1154    #氟化工
    b1060305 = 1155    #有机硅
    b1060306 = 1156    #磷化工
    b1060307 = 1157    #聚氨酯
    b1060308 = 1158    #其他化学原料
    b1060401 = 1159    #日用化学品
    b1060402 = 1160    #民爆用品
    b1060403 = 1161    #涂料涂漆
    b1060404 = 1162    #印染化学品
    b1060405 = 1163    #橡胶制品
    b1060406 = 1164    #塑料制品
    b1060407 = 1165    #其他化学制品
    b1070101 = 1166    #建筑施工Ⅲ
    b1070201 = 1167    #建筑装修Ⅲ
    b1080101 = 1168    #水泥Ⅲ
    b1080201 = 1169    #玻璃Ⅲ
    b1080301 = 1170    #陶瓷
    b1080302 = 1171    #新型建材及非金属新材料
    b1090101 = 1172    #造纸Ⅲ
    b1090201 = 1173    #印刷
    b1090202 = 1174    #包装
    b1090203 = 1175    #其他轻工Ⅲ
    b10a0101 = 1176    #工程机械Ⅲ
    b10a0201 = 1177    #矿山冶金机械
    b10a0202 = 1178    #纺织服装机械
    b10a0203 = 1179    #其他专用机械
    b10a0301 = 1180    #锅炉设备
    b10a0302 = 1181    #机床设备
    b10a0303 = 1182    #起重运输设备
    b10a0304 = 1183    #基础件
    b10a0305 = 1184    #其他通用机械
    b10a0401 = 1185    #铁路交通设备
    b10a0402 = 1186    #船舶制造
    b10a0403 = 1187    #其他运输设备
    b10a0501 = 1188    #仪器仪表Ⅲ
    b10a0601 = 1189    #金属制品Ⅲ
    b10b0101 = 1190    #电站设备Ⅲ
    b10b0201 = 1191    #一次设备
    b10b0202 = 1192    #二次设备
    b10b0301 = 1193    #风电
    b10b0302 = 1194    #核电
    b10b0303 = 1195    #光伏
    b10c0101 = 1196    #航空军工
    b10c0102 = 1197    #航天军工
    b10c0201 = 1198    #兵器兵装Ⅲ
    b10c0301 = 1199    #其他军工Ⅲ
    b10d0101 = 1200    #乘用车Ⅲ
    b10d0201 = 1201    #卡车
    b10d0202 = 1202    #客车
    b10d0203 = 1203    #专用汽车
    b10d0301 = 1204    #汽车零部件Ⅲ
    b10d0401 = 1205    #汽车销售及服务Ⅲ
    b10d0501 = 1206    #摩托车及其他Ⅲ
    b10e0101 = 1207    #百货
    b10e0102 = 1208    #超市
    b10e0103 = 1209    #连锁
    b10e0201 = 1210    #贸易Ⅲ
    b10f0101 = 1211    #景区
    b10f0102 = 1212    #旅行社
    b10f0201 = 1213    #酒店
    b10f0202 = 1214    #餐饮
    b10g0101 = 1215    #白色家电Ⅲ
    b10g0201 = 1216    #黑色家电Ⅲ
    b10g0301 = 1217    #小家电Ⅲ
    b10g0401 = 1218    #照明设备
    b10g0402 = 1219    #其他家电
    b10h0401 = 1220    #棉纺制品
    b10h0402 = 1221    #非棉纺织品
    b10h0403 = 1222    #印染
    b10h0404 = 1223    #服装及服饰制品
    b10h0501 = 1224    #高端及奢侈品
    b10h0502 = 1225    #大众品牌
    b10h0503 = 1226    #休闲快时尚
    b10h0504 = 1227    #体育及户外
    b10h0505 = 1228    #家纺
    b10i0101 = 1229    #化学原料药
    b10i0102 = 1230    #化学制剂
    b10i0201 = 1231    #中药饮片
    b10i0202 = 1232    #中成药
    b10i0301 = 1233    #生物医药Ⅲ
    b10i0401 = 1234    #医药流通
    b10i0402 = 1235    #医疗器械
    b10i0403 = 1236    #医疗服务
    b10j0101 = 1237    #白酒Ⅲ
    b10j0201 = 1238    #啤酒
    b10j0202 = 1239    #葡萄酒
    b10j0203 = 1240    #黄酒
    b10j0204 = 1241    #其他饮料Ⅲ
    b10j0301 = 1242    #肉制品
    b10j0302 = 1243    #调味品
    b10j0303 = 1244    #乳制品
    b10j0304 = 1245    #其他食品
    b10k0101 = 1246    #种子
    b10k0102 = 1247    #果蔬饮料
    b10k0103 = 1248    #农产品加工及流通
    b10k0201 = 1249    #饲料
    b10k0202 = 1250    #动物疫苗
    b10k0203 = 1251    #畜牧养殖
    b10k0301 = 1252    #林木及加工
    b10k0401 = 1253    #水产养殖
    b10k0402 = 1254    #海洋捕捞
    b10l0101 = 1255    #国有银行Ⅲ
    b10l0201 = 1256    #股份制银行
    b10l0202 = 1257    #城商行
    b10m0101 = 1258    #证券Ⅲ
    b10m0201 = 1259    #保险Ⅲ
    b10m0301 = 1260    #信托
    b10n0101 = 1261    #住宅地产
    b10n0102 = 1262    #商业地产
    b10n0103 = 1263    #园区
    b10n0201 = 1264    #房地产服务Ⅲ
    b10o0101 = 1265    #公路
    b10o0102 = 1266    #铁路
    b10o0201 = 1267    #公交
    b10o0202 = 1268    #物流
    b10o0301 = 1269    #航运
    b10o0302 = 1270    #港口
    b10o0401 = 1271    #航空
    b10o0402 = 1272    #机场
    b10p0101 = 1273    #半导体Ⅲ
    b10p0201 = 1274    #电子设备Ⅲ
    b10p0301 = 1275    #其他元器件Ⅲ
    b10q0101 = 1276    #电信运营Ⅲ
    b10q0201 = 1277    #动力设备
    b10q0202 = 1278    #其他
    b10q0203 = 1279    #通信终端及配件
    b10q0204 = 1280    #网络覆盖优化与运维
    b10q0205 = 1281    #网络接配及塔设
    b10q0206 = 1282    #系统设备
    b10q0207 = 1283    #线缆
    b10q0301 = 1284    #增值服务Ⅲ
    b10r0101 = 1285    #PC及服务器硬件
    b10r0102 = 1286    #专用计算机设备
    b10r0201 = 1287    #基础软件及套装软件
    b10r0202 = 1288    #行业应用软件
    b10r0301 = 1289    #IT外包服务
    b10r0302 = 1290    #系统集成及IT咨询
    b10s0101 = 1291    #平面媒体
    b10s0102 = 1292    #广播电视
    b10s0103 = 1293    #电影动画
    b10s0104 = 1294    #互联网
    b10s0105 = 1295    #整合营销
    b10t0101 = 1296    #综合Ⅲ

#证监会2012行业分类枚举值
@unique
class CSRC(Enum):
    c1201 = 1      #农、林、牧、渔业
    c1202 = 2      #采矿业
    c1203 = 3      #制造业
    c1204 = 4      #电力、热力、燃气及水生产和供应业
    c1205 = 5      #建筑业
    c1206 = 6      #批发和零售业
    c1207 = 7      #交通运输、仓储和邮政业
    c1208 = 8      #住宿和餐饮业
    c1209 = 9      #信息传输、软件和信息技术服务业
    c1210 = 10     #金融业
    c1211 = 11     #房地产业
    c1212 = 12     #租赁和商务服务业
    c1213 = 13     #科学研究和技术服务业
    c1214 = 14     #水利、环境和公共设施管理业
    c1216 = 15     #教育
    c1217 = 16     #卫生和社会工作
    c1218 = 17     #文化、体育和娱乐业
    c1219 = 18     #综合
    c1201010000 = 19     #农业
    c1201020000 = 20     #林业
    c1201030000 = 21     #畜牧业
    c1201040000 = 22     #渔业
    c1201050000 = 23     #农、林、牧、渔服务业
    c1202010000 = 24     #煤炭开采和洗选业
    c1202020000 = 25     #石油和天然气开采业
    c1202030000 = 26     #黑色金属矿采选业
    c1202040000 = 27     #有色金属矿采选业
    c1202050000 = 28     #非金属矿采选业
    c1202060000 = 29     #开采辅助活动
    c1202070000 = 30     #其他采矿业
    c1203010000 = 31     #农副食品加工业
    c1203020000 = 32     #食品制造业
    c1203030000 = 33     #酒、饮料和精制茶制造业
    c1203040000 = 34     #烟草制品业
    c1203050000 = 35     #纺织业
    c1203060000 = 36     #纺织服装、服饰业
    c1203070000 = 37     #皮革、毛皮、羽毛及其制品和制鞋业
    c1203080000 = 38     #木材加工和木、竹、藤、棕、草制品业
    c1203090000 = 39     #家具制造业
    c1203100000 = 40     #造纸和纸制品业
    c1203110000 = 41     #印刷和记录媒介复制业
    c1203120000 = 42     #文教、工美、体育和娱乐用品制造业
    c1203130000 = 43     #石油加工、炼焦和核燃料加工业
    c1203140000 = 44     #化学原料和化学制品制造业
    c1203150000 = 45     #医药制造业
    c1203160000 = 46     #化学纤维制造业
    c1203170000 = 47     #橡胶和塑料制品业
    c1203180000 = 48     #非金属矿物制品业
    c1203190000 = 49     #黑色金属冶炼和压延加工业
    c1203200000 = 50     #有色金属冶炼和压延加工业
    c1203210000 = 51     #金属制品业
    c1203220000 = 52     #通用设备制造业
    c1203230000 = 53     #专用设备制造业
    c1203240000 = 54     #汽车制造业
    c1203250000 = 55     #铁路、船舶、航空航天和其他运输设备制造业
    c1203260000 = 56     #电气机械和器材制造业
    c1203270000 = 57     #计算机、通信和其他电子设备制造业
    c1203280000 = 58     #仪器仪表制造业
    c1203290000 = 59     #其他制造业
    c1203300000 = 60     #废弃资源综合利用业
    c1203310000 = 61     #金属制品、机械和设备修理业
    c1204010000 = 62     #电力、热力生产和供应业
    c1204020000 = 63     #燃气生产和供应业
    c1204030000 = 64     #水的生产和供应业
    c1205010000 = 65     #房屋建筑业
    c1205020000 = 66     #土木工程建筑业
    c1205030000 = 67     #建筑安装业
    c1205040000 = 68     #建筑装饰和其他建筑业
    c1206010000 = 69     #批发业
    c1206020000 = 70     #零售业
    c1207010000 = 71     #铁路运输业
    c1207020000 = 72     #道路运输业
    c1207030000 = 73     #水上运输业
    c1207040000 = 74     #航空运输业
    c1207050000 = 75     #管道运输业
    c1207060000 = 76     #装卸搬运和运输代理业
    c1207070000 = 77     #仓储业
    c1207080000 = 78     #邮政业
    c1208010000 = 79     #住宿业
    c1208020000 = 80     #餐饮业
    c1209010000 = 81     #电信、广播电视和卫星传输服务
    c1209020000 = 82     #互联网和相关服务
    c1209030000 = 83     #软件和信息技术服务业
    c1210010000 = 84     #货币金融服务
    c1210020000 = 85     #资本市场服务
    c1210030000 = 86     #保险业
    c1210040000 = 87     #其他金融业
    c1211010000 = 88     #房地产业
    c1212010000 = 89     #租赁业
    c1212020000 = 90     #商务服务业
    c1213010000 = 91     #研究和试验发展
    c1213020000 = 92     #专业技术服务业
    c1213030000 = 93     #科技推广和应用服务业
    c1214010000 = 94     #水利管理业
    c1214020000 = 95     #生态保护和环境治理业
    c1214030000 = 96     #公共设施管理业
    c1216010000 = 97     #教育
    c1217010000 = 98     #卫生
    c1217020000 = 99     #社会工作
    c1218010000 = 100     #新闻和出版业
    c1218020000 = 101     #广播、电视、电影和影视录音制作业
    c1218030000 = 102     #文化艺术业
    c1218040000 = 103     #体育
    c1218050000 = 104     #娱乐业
    c1219010000 = 105     #综合

#申万行业分类枚举值
@unique
class SW(Enum):
    s6101 = 2001    #农林牧渔
    s6102 = 2002    #采掘
    s6103 = 2003    #化工
    s6104 = 2004    #钢铁
    s6105 = 2005    #有色金属
    s6108 = 2006    #电子
    s6111 = 2007    #家用电器
    s6112 = 2008    #食品饮料
    s6113 = 2009    #纺织服装
    s6114 = 2010    #轻工制造
    s6115 = 2011    #医药生物
    s6116 = 2012    #公用事业
    s6117 = 2013    #交通运输
    s6118 = 2014    #房地产
    s6120 = 2015    #商业贸易
    s6121 = 2016    #休闲服务
    s6123 = 2017    #综合
    s6124 = 2018    #建筑材料
    s6125 = 2019    #建筑装饰
    s6126 = 2020    #电气设备
    s6127 = 2021    #机械设备
    s6128 = 2022    #国防军工
    s6129 = 2023    #汽车
    s6130 = 2024    #计算机
    s6131 = 2025    #传媒
    s6132 = 2026    #通信
    s6133 = 2027    #银行
    s6134 = 2028    #非银金融
    s610101 = 2029    #林业Ⅱ
    s610102 = 2030    #农产品加工
    s610103 = 2034    #农业综合Ⅱ
    s610104 = 2035    #饲料Ⅱ
    s610105 = 2036    #渔业
    s610106 = 2038    #种植业
    s610107 = 2041    #畜禽养殖Ⅱ
    s610108 = 2042    #动物保健Ⅱ
    s610201 = 2043    #煤炭开采Ⅱ
    s610202 = 2044    #其他采掘Ⅱ
    s610203 = 2045    #石油开采Ⅱ
    s610204 = 2046    #采掘服务Ⅱ
    s610301 = 2047    #化工新材料Ⅱ
    s610302 = 2048    #化学纤维
    s610303 = 2049    #化学原料
    s610304 = 2050    #化学制品
    s610305 = 2051    #石油化工
    s610306 = 2052    #塑料Ⅱ
    s610307 = 2053    #橡胶
    s610401 = 2054    #钢铁Ⅱ
    s610501 = 2055    #金属非金属新材料
    s610502 = 2056    #有色金属冶炼与加工
    s610503 = 2057    #工业金属
    s610504 = 2058    #黄金Ⅱ
    s610505 = 2059    #稀有金属
    s610801 = 2060    #半导体
    s610802 = 2061    #其他电子Ⅱ
    s610803 = 2062    #元件Ⅱ
    s610804 = 2063    #光学光电子
    s610805 = 2064    #电子制造Ⅱ
    s611101 = 2065    #白色家电
    s611102 = 2066    #视听器材
    s611201 = 2067    #食品加工
    s611202 = 2068    #食品制造
    s611203 = 2069    #饮料制造
    s611204 = 2070    #食品加工
    s611301 = 2071    #纺织制造
    s611302 = 2072    #服装家纺
    s611401 = 2073    #包装印刷Ⅱ
    s611402 = 2074    #家用轻工
    s611403 = 2075    #造纸Ⅱ
    s611404 = 2076    #其他轻工制造Ⅱ
    s611501 = 2077    #化学制药
    s611502 = 2078    #生物制品Ⅱ
    s611503 = 2079    #医疗器械Ⅱ
    s611504 = 2080    #医药商业Ⅱ
    s611505 = 2081    #中药Ⅱ
    s611506 = 2082    #医疗服务Ⅱ
    s611601 = 2083    #电力
    s611602 = 2084    #环保工程及服务Ⅱ
    s611603 = 2085    #燃气Ⅱ
    s611604 = 2086    #水务Ⅱ
    s611701 = 2087    #港口Ⅱ
    s611702 = 2088    #公交Ⅱ
    s611703 = 2089    #航空运输Ⅱ
    s611704 = 2090    #机场Ⅱ
    s611705 = 2091    #高速公路Ⅱ
    s611706 = 2092    #航运Ⅱ
    s611707 = 2093    #铁路运输Ⅱ
    s611708 = 2094    #物流Ⅱ
    s611801 = 2095    #房地产开发Ⅱ
    s611802 = 2096    #园区开发Ⅱ
    s612001 = 2097    #零售
    s612002 = 2098    #贸易Ⅱ
    s612003 = 2099    #一般零售
    s612004 = 2100    #专业零售
    s612005 = 2101    #商业物业经营
    s612101 = 2102    #餐饮Ⅱ
    s612102 = 2103    #景点
    s612103 = 2104    #酒店Ⅱ
    s612104 = 2105    #旅游综合Ⅱ
    s612105 = 2106    #其他休闲服务Ⅱ
    s612301 = 2107    #综合Ⅱ
    s612401 = 2108    #水泥制造Ⅱ
    s612402 = 2109    #玻璃制造Ⅱ
    s612403 = 2110    #其他建材Ⅱ
    s612501 = 2111    #房屋建设Ⅱ
    s612502 = 2112    #装修装饰Ⅱ
    s612503 = 2113    #园林工程Ⅱ
    s612504 = 2114    #基础建设
    s612505 = 2115    #专业工程
    s612601 = 2116    #电机Ⅱ
    s612602 = 2117    #电气自动化设备
    s612603 = 2118    #电源设备
    s612604 = 2119    #高低压设备
    s612701 = 2120    #通用机械
    s612702 = 2121    #专用设备
    s612703 = 2122    #仪器仪表Ⅱ
    s612704 = 2123    #金属制品Ⅱ
    s612705 = 2124    #运输设备Ⅱ
    s612801 = 2125    #航天装备Ⅱ
    s612802 = 2126    #航空装备Ⅱ
    s612803 = 2127    #地面兵装Ⅱ
    s612804 = 2128    #船舶制造Ⅱ
    s612901 = 2129    #汽车整车
    s612902 = 2130    #汽车零部件Ⅱ
    s612903 = 2131    #汽车服务Ⅱ
    s612904 = 2132    #其他交运设备Ⅱ
    s613001 = 2133    #计算机设备Ⅱ
    s613002 = 2134    #计算机应用
    s613101 = 2135    #文化传媒
    s613102 = 2136    #营销传播
    s613103 = 2137    #互联网传媒
    s613201 = 2138    #通信运营Ⅱ
    s613202 = 2139    #通信设备
    s613301 = 2140    #银行Ⅱ
    s613401 = 2141    #证券Ⅱ
    s613402 = 2142    #保险Ⅱ
    s613403 = 2143    #多元金融Ⅱ
    s6101010100 = 2144    #林业Ⅲ
    s6101020100 = 2145    #果蔬加工
    s6101020200 = 2146    #粮油加工
    s6101020300 = 2147    #畜禽加工
    s6101020400 = 2148    #其他农产品加工
    s6101030100 = 2149    #农业综合Ⅲ
    s6101040100 = 2150    #饲料Ⅲ
    s6101050100 = 2151    #海洋捕捞
    s6101050200 = 2152    #水产养殖
    s6101060100 = 2153    #种子生产
    s6101060200 = 2154    #粮食种植
    s6101060300 = 2155    #其他种植业
    s6101070100 = 2156    #畜禽养殖Ⅲ
    s6101080100 = 2157    #动物保健Ⅲ
    s6102010100 = 2158    #煤炭开采Ⅲ
    s6102010200 = 2159    #焦炭加工
    s6102020100 = 2160    #其他采掘Ⅲ
    s6102030100 = 2161    #石油开采Ⅲ
    s6102040100 = 2162    #油气钻采服务
    s6102040200 = 2163    #其他采掘服务
    s6103010100 = 2164    #其他化工新材料
    s6103010200 = 2165    #聚氨酯
    s6103010300 = 2166    #玻纤
    s6103020100 = 2167    #涤纶
    s6103020200 = 2168    #维纶
    s6103020300 = 2169    #粘胶
    s6103020400 = 2170    #其他纤维
    s6103020500 = 2171    #氨纶
    s6103030100 = 2172    #纯碱
    s6103030200 = 2173    #氯碱
    s6103030300 = 2174    #无机盐
    s6103030400 = 2175    #其他化学原料
    s6103040100 = 2176    #氮肥
    s6103040200 = 2177    #磷肥
    s6103040300 = 2178    #农药
    s6103040400 = 2179    #日用化学产品
    s6103040500 = 2180    #涂料油漆油墨制造
    s6103040600 = 2181    #钾肥
    s6103040700 = 2182    #民爆用品
    s6103040800 = 2183    #纺织化学用品
    s6103040900 = 2184    #其他化学制品
    s6103041000 = 2185    #复合肥
    s6103041100 = 2186    #氟化工及制冷剂
    s6103041200 = 2187    #磷化工及磷酸盐
    s6103041300 = 2188    #聚氨酯
    s6103041400 = 2189    #玻纤
    s6103050100 = 2190    #石油加工
    s6103050200 = 2191    #炼焦业
    s6103050300 = 2192    #石油贸易
    s6103060100 = 2193    #其他塑料制品
    s6103060200 = 2194    #合成革
    s6103060300 = 2195    #改性塑料
    s6103070100 = 2196    #轮胎
    s6103070200 = 2197    #其他橡胶制品
    s6103070300 = 2198    #炭黑
    s6104010100 = 2199    #普钢
    s6104010200 = 2200    #特钢
    s6105010100 = 2201    #金属新材料Ⅲ
    s6105010200 = 2202    #磁性材料
    s6105010300 = 2203    #非金属新材料
    s6105020100 = 2204    #有色金属冶炼Ⅲ
    s6105020200 = 2205    #铝
    s6105020300 = 2206    #铜
    s6105020400 = 2207    #铅锌
    s6105020500 = 2208    #黄金
    s6105020600 = 2209    #小金属
    s6105030100 = 2210    #铝
    s6105030200 = 2211    #铜
    s6105030300 = 2212    #铅锌
    s6105040100 = 2213    #黄金Ⅲ
    s6105050100 = 2214    #稀土
    s6105050200 = 2215    #钨
    s6105050300 = 2216    #锂
    s6105050400 = 2217    #其他稀有小金属
    s6108010100 = 2218    #集成电路
    s6108010200 = 2219    #分立器件
    s6108010300 = 2220    #半导体材料
    s6108020100 = 2221    #其他电子Ⅲ
    s6108030100 = 2222    #元件Ⅲ
    s6108030200 = 2223    #印制电路板
    s6108030300 = 2224    #被动元件
    s6108040100 = 2225    #显示器件Ⅲ
    s6108040200 = 2226    #LED
    s6108040300 = 2227    #光学元件
    s6108050100 = 2228    #电子系统组装
    s6108050200 = 2229    #电子零部件制造
    s6111010100 = 2230    #冰箱
    s6111010200 = 2231    #空调
    s6111010300 = 2232    #洗衣机
    s6111010400 = 2233    #小家电
    s6111010500 = 2234    #家电零部件
    s6111020100 = 2235    #彩电
    s6111020200 = 2236    #其它视听器材
    s6112010100 = 2237    #肉制品
    s6112010200 = 2238    #制糖
    s6112010300 = 2239    #食品综合
    s6112020100 = 2240    #调味发酵品
    s6112020200 = 2241    #乳品
    s6112030100 = 2242    #白酒
    s6112030200 = 2243    #啤酒
    s6112030300 = 2244    #其他酒类
    s6112030400 = 2245    #软饮料
    s6112030500 = 2246    #葡萄酒
    s6112030600 = 2247    #黄酒
    s6112040100 = 2248    #肉制品
    s6112040200 = 2249    #调味发酵品
    s6112040300 = 2250    #乳品
    s6112040400 = 2251    #食品综合
    s6113010100 = 2252    #毛纺
    s6113010200 = 2253    #棉纺
    s6113010300 = 2254    #丝绸
    s6113010400 = 2255    #印染
    s6113010500 = 2256    #辅料
    s6113010600 = 2257    #其他纺织
    s6113020100 = 2258    #服装Ⅲ
    s6113020200 = 2259    #男装
    s6113020300 = 2260    #女装
    s6113020400 = 2261    #休闲服装
    s6113020500 = 2262    #鞋帽
    s6113020600 = 2263    #家纺
    s6113020700 = 2264    #其他服装
    s6114010100 = 2265    #包装印刷Ⅲ
    s6114020100 = 2266    #其他轻工制造Ⅲ
    s6114020200 = 2267    #家具
    s6114020300 = 2268    #其他家用轻工
    s6114020400 = 2269    #珠宝首饰
    s6114020500 = 2270    #文娱用品
    s6114030100 = 2271    #造纸Ⅲ
    s6114040100 = 2272    #其他轻工制造Ⅲ
    s6115010100 = 2273    #化学原料药
    s6115010200 = 2274    #化学制剂
    s6115010300 = 2275    #化学药
    s6115020100 = 2276    #生物制品Ⅲ
    s6115030100 = 2277    #医疗器械Ⅲ
    s6115040100 = 2278    #医药商业Ⅲ
    s6115050100 = 2279    #中药Ⅲ
    s6115060100 = 2280    #医疗服务Ⅲ
    s6116010100 = 2281    #火电
    s6116010200 = 2282    #水电
    s6116010300 = 2283    #燃机发电
    s6116010400 = 2284    #热电
    s6116010500 = 2285    #新能源发电
    s6116020100 = 2286    #环保工程及服务Ⅲ
    s6116030100 = 2287    #燃气Ⅲ
    s6116040100 = 2288    #水务Ⅲ
    s6117010100 = 2289    #港口Ⅲ
    s6117020100 = 2290    #公交Ⅲ
    s6117030100 = 2291    #航空运输Ⅲ
    s6117040100 = 2292    #机场Ⅲ
    s6117050100 = 2293    #高速公路Ⅲ
    s6117060100 = 2294    #航运Ⅲ
    s6117070100 = 2295    #铁路运输Ⅲ
    s6117080100 = 2296    #物流Ⅲ
    s6118010100 = 2297    #房地产开发Ⅲ
    s6118020100 = 2298    #园区开发Ⅲ
    s6120010100 = 2299    #百货零售
    s6120010200 = 2300    #专业连锁
    s6120010300 = 2301    #商业物业经营
    s6120020100 = 2302    #贸易Ⅲ
    s6120030100 = 2303    #百货
    s6120030200 = 2304    #超市
    s6120030300 = 2305    #多业态零售
    s6120040100 = 2306    #专业连锁
    s6120050100 = 2307    #一般物业经营
    s6120050200 = 2308    #专业市场
    s6121010100 = 2309    #餐饮Ⅲ
    s6121020100 = 2310    #人工景点
    s6121020200 = 2311    #自然景点
    s6121030100 = 2312    #酒店Ⅲ
    s6121040100 = 2313    #旅游综合Ⅲ
    s6121050100 = 2314    #其他休闲服务Ⅲ
    s6123010100 = 2315    #综合Ⅲ
    s6124010100 = 2316    #水泥制造Ⅲ
    s6124020100 = 2317    #玻璃制造Ⅲ
    s6124030100 = 2318    #耐火材料
    s6124030200 = 2319    #管材
    s6124030300 = 2320    #其他建材Ⅲ
    s6125010100 = 2321    #房屋建设Ⅲ
    s6125020100 = 2322    #装修装饰Ⅲ
    s6125030100 = 2323    #园林工程Ⅲ
    s6125040100 = 2324    #城轨建设
    s6125040200 = 2325    #路桥施工
    s6125040300 = 2326    #水利工程
    s6125040400 = 2327    #铁路建设
    s6125040500 = 2328    #其他基础建设
    s6125050100 = 2329    #钢结构
    s6125050200 = 2330    #化学工程
    s6125050300 = 2331    #国际工程承包
    s6125050400 = 2332    #其他专业工程
    s6126010100 = 2333    #电机Ⅲ
    s6126020100 = 2334    #电网自动化
    s6126020200 = 2335    #工控自动化
    s6126020300 = 2336    #计量仪表
    s6126030100 = 2337    #综合电力设备商
    s6126030200 = 2338    #风电设备
    s6126030300 = 2339    #光伏设备
    s6126030400 = 2340    #火电设备
    s6126030500 = 2341    #储能设备
    s6126030600 = 2342    #其它电源设备
    s6126040100 = 2343    #高压设备
    s6126040200 = 2344    #中压设备
    s6126040300 = 2345    #低压设备
    s6126040400 = 2346    #线缆部件及其他
    s6127010100 = 2347    #机床工具
    s6127010200 = 2348    #机械基础件
    s6127010300 = 2349    #磨具磨料
    s6127010400 = 2350    #内燃机
    s6127010500 = 2351    #制冷空调设备
    s6127010600 = 2352    #其它通用机械
    s6127020100 = 2353    #工程机械
    s6127020200 = 2354    #重型机械
    s6127020300 = 2355    #冶金矿采化工设备
    s6127020400 = 2356    #楼宇设备
    s6127020500 = 2357    #环保设备
    s6127020600 = 2358    #纺织服装设备
    s6127020700 = 2359    #农用机械
    s6127020800 = 2360    #印刷包装机械
    s6127020900 = 2361    #其它专用机械
    s6127030100 = 2362    #仪器仪表Ⅲ
    s6127040100 = 2363    #金属制品Ⅲ
    s6127050100 = 2364    #铁路设备
    s6128010100 = 2365    #航天装备Ⅲ
    s6128020100 = 2366    #航空装备Ⅲ
    s6128030100 = 2367    #地面兵装Ⅲ
    s6128040100 = 2368    #船舶制造Ⅲ
    s6129010100 = 2369    #乘用车
    s6129010200 = 2370    #商用载货车
    s6129010300 = 2371    #商用载客车
    s6129020100 = 2372    #汽车零部件Ⅲ
    s6129030100 = 2373    #汽车服务Ⅲ
    s6129040100 = 2374    #其他交运设备Ⅲ
    s6130010100 = 2375    #计算机设备Ⅲ
    s6130020100 = 2376    #软件开发
    s6130020200 = 2377    #IT服务
    s6131010100 = 2378    #平面媒体
    s6131010200 = 2379    #影视动漫
    s6131010300 = 2380    #有线电视网络
    s6131010400 = 2381    #其他文化传媒
    s6131020100 = 2382    #营销服务
    s6131030100 = 2383    #互联网信息服务
    s6131030200 = 2384    #移动互联网服务
    s6131030300 = 2385    #其他互联网服务
    s6132010100 = 2386    #通信运营Ⅲ
    s6132020100 = 2387    #终端设备
    s6132020200 = 2388    #通信传输设备
    s6132020300 = 2389    #通信配套服务
    s6133010100 = 2390    #银行Ⅲ
    s6134010100 = 2391    #证券Ⅲ
    s6134020100 = 2392    #保险Ⅲ
    s6134030100 = 2393    #多元金融Ⅲ

#量化分析平台基本面因子枚举值
@unique
class Factors(Enum):
    pre_close = 1        #前收盘价
    open  = 2        #开盘价
    high  = 3        #最高价
    low   = 4        #最低价
    close = 5        #收盘价
    vwap  = 6        #均价
    chg   = 7        #涨跌
    pct_chg = 8        #涨跌幅
    turn  = 9        #换手率
    free_turn = 10       #换手率(基准：自由流通股本
    volume = 11       #成交量
    amt   = 12       #成交额
    dealnum = 13       #成交笔数
    swing = 14       #振幅
    re_ipo_chg = 15       #相对发行价涨跌
    rel_ipo_pct_chg  = 16       #相对发行价涨跌幅
    trade_status = 17       #交易状态
    susp_reason = 18       #停牌原因
    lastradeday_s = 19       #最近交易日
    last_trade_day = 20       #市场最近交易日
    adjfactor = 21       #复权因子
    close2 = 22       #收盘价(支持定点复权
    maxupordown = 23       #涨跌停状态
    pre_close_w = 24       #周前收盘价
    open_w = 25       #周开盘价
    high_w = 26       #周最高价
    low_w = 27       #周最低价
    close_w = 28       #周收盘价
    vwap_w = 29       #周均价
    chg_w = 30       #周涨跌
    pct_chg_w = 31       #周涨跌幅
    turn_w = 32       #周换手率
    free_turn_w = 33       #周换手率(基准：自由流通股本
    avg_turn_w = 34       #周平均换手率
    avg_free_turn_w  = 35       #周平均换手率(基准：自由流通股本
    volume_w = 36       #周成交量
    amt_w = 37       #周成交额
    swing_w = 38       #周振幅
    high_date_w = 39       #周最高价日
    low_date_w = 40       #周最低价日
    max_close_date_w = 41       #周最高收盘价日
    min_close_date_w = 42       #周最低收盘价日
    pre_close_m = 43       #月前收盘价
    open_m = 44       #月开盘价
    high_m = 45       #月最高价
    low_m = 46       #月最低价
    close_m = 47       #月收盘价
    vwap_m = 48       #月均价
    chg_m = 49       #月涨跌
    pct_chg_m = 50       #月涨跌幅
    turn_m = 51       #月换手率
    free_turn_m = 52       #月换手率(基准：自由流通股本
    avg_turn_m = 53       #月平均换手率
    avg_free_turn_m  = 54       #月平均换手率(基准：自由流通股本
    volume_m = 55       #月成交量
    amt_m = 56       #月成交额
    swing_m = 57       #月振幅
    high_date_m = 58       #月最高价日
    low_date_m = 59       #月最低价日
    max_close_date_m = 60       #月最高收盘价日
    min_close_date_m = 61       #月最低收盘价日
    pre_close_y = 62       #年前收盘价
    open_y = 63       #年开盘价
    high_y = 64       #年最高价
    low_y = 65       #年最低价
    close_y = 66       #年收盘价
    vwap_y = 67       #年均价
    chg_y = 68       #年涨跌
    pct_chg_y = 69       #年涨跌幅
    turn_y = 70       #年换手率
    free_turn_y = 71       #年换手率(基准：自由流通股本
    avg_turn_y = 72       #年平均换手率
    avg_free_turn_y  = 73       #年平均换手率(基准：自由流通股本
    volume_y = 74       #年成交量
    amt_y = 75       #年成交额
    swing_y = 76       #年振幅
    high_date_y = 77       #年最高价日
    low_date_y = 78       #年最低价日
    max_close_date_y = 79       #年最高收盘价日
    min_close_date_y = 80       #年最低收盘价日
    pre_close_per = 81       #区间前收盘价
    open_per = 82       #区间开盘价
    high_per = 83       #区间最高价
    low_per = 84       #区间最低价
    close_per = 85       #区间收盘价
    max_close_per = 86       #区间最高收盘价
    min_close_per = 87       #区间最低收盘价
    vwap_per = 88       #区间成交均价
    chg_per = 89       #区间涨跌
    pct_chg_per = 90       #区间涨跌幅
    avg_pct_chg_per  = 91       #区间日均涨跌幅
    turn_per = 92       #区间换手率
    free_turn_per = 93       #区间换手率(基准：自由流通股本
    avg_turn_per = 94       #区间平均换手率
    avg_free_turn_per = 95       #区间平均换手率(基准：自由流通股本
    volume_per = 96       #区间成交量
    amt_per = 97       #区间成交额
    swing_per = 98       #区间振幅
    avg_vol_per = 99       #区间日均成交量
    avg_amt_per = 100      #区间日均成交额
    avg_MV_per = 101      #区间日均总市值
    relpctchange_per = 102      #相对大盘区间涨跌幅
    trade_days_per = 103      #区间交易日数
    limitup_days_per = 104      #区间涨停天数
    limitdown_days_per = 105      #区间跌停天数
    high_date_per = 106      #区间最高价日
    low_date_per = 107      #区间最低价日
    max_close_date_per = 108      #区间最高收盘价日
    min_close_date_per = 109      #区间最低收盘价日
    pct_chg_nd = 110      #N日涨跌幅
    relpctchange_nd  = 111      #相对大盘N日涨跌幅
    avg_pct_chg_nd = 112      #N日日均涨跌幅
    turn_nd = 113      #N日换手率
    avg_turn_nd = 114      #N日日均换手率
    swing_nd = 115      #N日振幅
    volume_nd = 116      #N日成交量
    amt_nd = 117      #N日成交额
    min_MV_nd = 118      #N日最低流通A市值
    firstquartile = 119      #N日收盘价1/4分位数
    median = 120      #N日收盘价中位数
    thirdquartile = 121      #N日收盘价3/4分位数
    avg_close_nd = 122      #N日日均收盘价(算术平均
    tradeday = 123      #指定日相近交易日期
    total_shares = 424      #总股本
    free_float_shares = 425      #自由流通股本
    float_a_shares = 426      #流通A股
    share_totala = 427      #A股合计
    #//估值因子
    ev    = 124      #总市值1(各市场合计
    mkt_cap_ard = 125      #总市值2(所在市场
    pe_ttm = 126      #市盈率PE(TTM
    val_pe_deducted_ttm  = 127      #市盈率PE(TTM扣除经常性损益
    pe_lyr = 128      #市盈率PE(LYR
    ps_ttm = 129      #市销率PS(TTM
    ps_lyr = 130      #市销率PS(LYR
    pcf_ocf_ttm = 131      #市现率PCF(经营现金流TTM
    pcf_ncf_ttm = 132      #市现率PCF(现金净流量TTM
    pcf_ocflyr = 133      #市现率PCF(经营现金流LYR
    pcf_nflyr = 134      #市现率PCF(现金净流量LYR
    dividendyield = 135      #股息率(报告期
    dividendyield2 = 136      #股息率(近12个月
    ev1   = 137      #企业价值(含货币资金
    ev2   = 138      #企业价值(剔除货币资金
    ev2_to_ebitda = 139      #企业倍数(EV2/EBITDA
    val_evtoebitda2  = 140      #企业倍数2(EV2/EBITDA
    mkt_freeshares = 141      #自由流通市值

    #//风险分析因子
    annualyeild_100w = 142      #年化收益率(最近100周
    annualyeild_24m  = 143      #年化收益率(最近24个月
    annualyeild_60m  = 144      #年化收益率(最近60个月
    annualstdevr_100w = 145      #年化波动率(最近100周
    annualstdevr_24m = 146      #年化波动率(最近24个月
    annualstdevr_60m = 147      #年化波动率(最近60个月
    beta_100w = 148      #BETA值(最近100周
    beta_24m = 149      #BETA值(最近24个月
    beta_60m = 150      #BETA值(最近60个月
    avgreturn = 151      #平均收益率
    avgreturny = 152      #平均收益率(年化
    stdevr = 153      #波动率
    stdevry = 154      #波动率(年化
    stdcoef = 155      #标准差系数
    nonsysrisk = 156      #非系统风险
    rquare = 157      #R-Square
    alpha = 158      #Alpha
    beta  = 159      #Beta
    betadf = 160      #Beta(剔除财务杠杆
    sharpe = 161      #Sharpe
    treynor = 162      #Treynor
    jensen = 163      #Jensen
    jenseny = 164      #Jensen(年化

    #//财务分析因子
    eps_basic = 165      #每股收益EPS-基本
    eps_diluted = 166      #每股收益EPS-稀释
    eps_diluted2 = 167      #每股收益EPS-期末股本摊薄
    eps_adjust = 168      #每股收益EPS-最新股本摊薄
    eps_exbasic = 169      #每股收益EPS-扣除/基本
    eps_exdiluted = 170      #每股收益EPS-扣除/稀释
    eps_exdiluted2 = 171      #每股收益EPS-扣除/期末股本摊薄
    eps_ttm = 172      #每股收益EPS(TTM
    bps   = 173      #每股净资产BPS
    bps_adjust = 174      #每股净资产BPS-最新股本摊薄
    bps_new = 175      #每股净资产BPS(最新公告
    ocfps = 176      #每股经营活动产生的现金流量净额
    ocfps_ttm = 177      #每股经营活动产生的现金流量净额(TTM
    grps  = 178      #每股营业总收入
    orps  = 179      #每股营业收入
    orps_ttm = 180      #每股营业收入(TTM
    surpluscapitalps = 181      #每股资本公积
    surplusreserveps = 182      #每股盈余公积
    undistributedps  = 183      #每股未分配利润
    retainedps = 184      #每股留存收益
    cfps  = 185      #每股现金流量净额
    cfps_ttm = 186      #每股现金流量净额(TTM
    ebitps = 187      #每股息税前利润
    fcffps = 188      #每股企业自由现金流量
    fcfeps = 189      #每股股东自由现金流量
    ebitdaps = 190      #每股EBITDA
    roe_avg = 191      #净资产收益率ROE(平均
    roe_basic = 192      #净资产收益率ROE(加权
    roe_diluted = 193      #净资产收益率ROE(摊薄
    roe_deducted = 194      #净资产收益率ROE(扣除/平均
    roe_exbasic = 195      #净资产收益率ROE(扣除/加权
    roe_exdiluted = 196      #净资产收益率ROE(扣除/摊薄
    roe_add = 197      #净资产收益率ROE-增发条件
    roa2  = 198      #总资产回报率ROA
    roa   = 199      #总资产净利率ROA
    roic  = 200      #投入资本回报率ROIC
    roic_ttm = 201      #投入资本回报率(TTM
    rop   = 202      #人力投入回报率(ROP
    roe_yearly = 203      #年化净资产收益率
    roa2_yearly = 204      #年化总资产报酬率
    roa_yearly = 205      #年化总资产净利率
    netprofitmargin  = 206      #销售净利率
    grossprofitmargin = 207      #销售毛利率
    cogstosales = 208      #销售成本率
    expensetosales = 209      #销售期间费用率
    nptocostexpense  = 210      #成本费用利润率
    optoebt = 211      #主营业务比率
    profittogr = 212      #净利润/营业总收入
    optogr = 213      #营业利润/营业总收入
    ebittogr = 214      #息税前利润/营业总收入
    gctogr = 215      #营业总成本/营业总收入
    operateexpensetogr = 216      #销售费用/营业总收入
    adminexpensetogr = 217      #管理费用/营业总收入
    finaexpensetogr  = 218      #财务费用/营业总收入
    impairtogr = 219      #资产减值损失/营业总收入
    roe_ttm = 220      #净资产收益率ROE(TTM
    roe2_ttm = 221      #总资产报酬率ROA(TTM
    roa_ttm = 222      #总资产净利率ROA(TTM
    netprofitmargin_ttm  = 223      #销售净利率(TTM
    grossprofitmargin_ttm    = 224      #销售毛利率(TTM
    expensetosales_ttm = 225      #销售期间费用率(TTM
    profittogr_ttm = 226      #净利润/营业总收入(TTM
    optogr_ttm = 227      #营业利润/营业总收入(TTM
    gctogr_ttm = 228      #营业总成本/营业总收入(TTM
    operateexpensetogr_ttm   = 229      #销售费用/营业总收入(TTM
    adminexpensetogr_ttm = 230      #管理费用/营业总收入(TTM
    finaexpensetogr_ttm  = 231      #财务费用/营业总收入(TTM
    impairtogr_ttm = 232      #资产减值损失/营业总收入(TTM
    impairtoOP = 233      #资产减值损失/营业利润
    ebitdatosales = 234      #EBITDA/营业总收入
    operateincometoebt = 235      #经营活动净收益/利润总额
    investincometoebt = 236      #价值变动净收益/利润总额
    nonoperateprofittoebt    = 237      #营业外收支净额/利润总额
    taxtoebt = 238      #所得税/利润总额
    deductedprofittoprofit   = 239      #扣除非经常损益后的净利润/净利润
    operateincometoebt_ttm   = 240      #经营活动净收益/利润总额(TTM
    investincometoebt_ttm    = 241      #价值变动净收益/利润总额(TTM
    nonoperateprofittoebt_ttm    = 242      #营业外收支净额/利润总额(TTM
    salescashintoor  = 243      #销售商品提供劳务收到的现金/营业收入
    ocftoor = 244      #经营活动产生的现金流量净额/营业收入
    ocftooperateincome = 245      #经营活动产生的现金流量净额/经营活动净收益  "
    capitalizedtoda  = 246      #资本支出/折旧和摊销
    salescashintoor_ttm  = 247      #销售商品提供劳务收到的现金/营业收入(TTM   "
    ocftoor_ttm = 248      #经营活动产生的现金流量净额/营业收入(TTM   "
    ocftooperateincome_ttm   = 249      #经营活动产生的现金流量净额/经营活动净收益(TTM
    ocftocf = 250      #经营活动产生的现金流量净额占比
    icftocf = 251      #投资活动产生的现金流量净额占比
    fcftocf = 252      #筹资活动产生的现金流量净额占比
    ocftosales = 253      #经营性现金净流量/营业总收入
    ocftoinveststockdividend = 254      #现金满足投资比率
    ocftoop = 255      #现金营运指数
    ocftoassets = 256      #全部资产现金回收率
    ocftodividend = 257      #现金股利保障倍数
    debttoassets = 258      #资产负债率
    deducteddebttoassets = 259      #剔除预收款项后的资产负债率
    longdebttolongcaptial    = 260      #长期资本负债率
    longcapitaltoinvestment  = 261      #长期资产适合率
    assetstoequity = 262      #权益乘数
    catoassets = 263      #流动资产/总资产
    ncatoassets = 264      #非流动资产/总资产
    tangibleassetstoassets   = 265      #有形资产/总资产
    longdebttoequity = 266      #非流动负债权益比率
    currentdebttoequity  = 267      #流动负债权益比率
    equitytototalcapital = 268      #归属母公司股东的权益/全部投入资本
    intdebttototalcap = 269      #带息债务/全部投入资本
    currentdebttodebt = 270      #流动负债/负债合计
    longdebtodebt = 271      #非流动负债/负债合计
    ncatoequity = 272      #资本固定化比率
    current = 273      #流动比率
    quick = 274      #速动比率
    cashratio = 275      #保守速动比率
    cashtocurrentdebt = 276      #现金比率
    ocftoquickdebt = 277      #现金到期债务比
    ocftointerest = 278      #现金流量利息保障倍数
    debttoequity = 279      #产权比率(负债合计/归属母公司股东的权益
    equitytodebt = 280      #归属母公司股东的权益/负债合计
    equitytointerestdebt = 281      #归属母公司股东的权益/带息债务
    tangassettointdebt = 282      #有形资产/带息债务
    tangibleassettodebt  = 283      #有形资产/负债合计
    tangibleassettonetdebt   = 284      #有形资产/净债务
    ebitdatodebt = 285      #息税折旧摊销前利润/负债合计
    ocftodebt = 286      #经营活动产生的现金流量净额/负债合计
    ocftointerestdebt = 287      #经营活动产生的现金流量净额/带息债务
    ocftoshortdebt = 288      #经营活动产生的现金流量净额/流动负债
    ocftonetdebt = 289      #经营活动产生的现金流量净额/净债务
    ocftolongdebt = 290      #经营活动产生的现金流量净额/非流动负债
    ocficftocurrentdebt  = 291      #非筹资性现金净流量与流动负债的比率
    ocficftodebt = 292      #非筹资性现金净流量与负债总额的比率
    ebittointerest = 293      #已获利息倍数(EBIT/利息费用
    longdebttoworkingcapital = 294      #长期债务与营运资金比率
    longdebttodebt = 295      #长期负债占比
    debttotangibleequity = 296      #有形净值债务率
    netdebttoev = 297      #净债务/股权价值
    interestdebttoev = 298      #带息债务/股权价值
    ebitdatointerestdebt = 299      #EBITDA/带息债务
    ebitdatointerest = 300      #EBITDA/利息费用
    tltoebitda = 301      #全部债务/EBITDA
    cashtostdebt = 302      #货币资金/短期债务
    turndays = 303      #营业周期
    invturndays = 304      #存货周转天数
    arturndays = 305      #应收账款周转天数
    apturndays = 306      #应付账款周转天数
    netturndays = 307      #净营业周期
    invturn = 308      #存货周转率
    arturn = 309      #应收账款周转率
    caturn = 310      #流动资产周转率
    operatecapitalturn = 311      #营运资本周转率
    faturn = 312      #固定资产周转率
    non_currentassetsturn    = 313      #非流动资产周转率
    assetsturn = 314      #总资产周转率
    apturn = 315      #应付账款周转率
    yoyeps_basic = 316      #基本每股收益(同比增长率
    yoyeps_diluted = 317      #稀释每股收益(同比增长率
    yoyocfps = 318      #每股经营活动产生的现金流量净额(同比增长率
    yoy_tr = 319      #营业总收入(同比增长率
    yoy_or = 320      #营业收入(同比增长率
    yoyop = 321      #营业利润(同比增长率
    yoyebt = 322      #利润总额(同比增长率
    yoyprofit = 323      #净利润(同比增长率
    yoynetprofit = 324      #归属母公司股东的净利润(同比增长率
    yoynetprofit_deducted    = 325      #归属母公司股东的净利润-扣除非经常损益(同比增长率
    yoyocf = 326      #经营活动产生的现金流量净额(同比增长率
    yoyroe = 327      #净资产收益率(摊薄(同比增长率
    yoy_equity = 328      #净资产(同比增长率
    yoydebt = 329      #总负债(同比增长率
    yoy_assets = 330      #总资产(同比增长率
    yoycf = 331      #现金净流量(同比增长率
    maintenance = 332      #资本项目规模维持率
    yoy_cash = 333      #货币资金增长率
    yoy_fixedassets  = 334      #固定资产投资扩张率
    yoybps = 335      #每股净资产(相对年初增长率
    yoyassets = 336      #资产总计(相对年初增长率
    yoyequity = 337      #归属母公司股东的权益(相对年初增长率
    growth_cagr_tr = 338      #营业总收入复合年增长率
    growth_cagr_netprofit    = 339      #净利润复合年增长率
    growth_gr = 340      #营业总收入(N年，增长率
    growth_gc = 341      #营业总成本(N年，增长率
    growth_or = 342      #营业收入(N年，增长率
    growth_op = 343      #营业利润(N年，增长率
    growth_operateincome = 344      #经营活动净收益(N年，增长率
    growth_investincome  = 345      #价值变动净收益(N年，增长率
    growth_ebt = 346      #利润总额(N年，增长率
    growth_profit = 347      #净利润(N年，增长率
    growth_netprofit = 348      #归属母公司股东的净利润(N年，增长率
    growth_netprofit_deducted    = 349      #归属母公司股东的净利润-扣除非经常损益(N年，增长率
    growth_ocf = 350      #经营活动产生的现金流量净额(N年，增长率
    growth_assets = 351      #资产总计(N年，增长率
    growth_totalequity = 352      #股东权益(N年，增长率
    growth_equity = 353      #归属母公司股东的权益(N年，增长率
    growth_profittosales = 354      #销售利润率(N年，增长率
    growth_roe = 355      #净资产收益率(N年，增长率
    profit_ttm = 417      #净利润(TTM
    extraordinary = 418      #非经常性损益
    deductedprofit = 419      #扣除非经常性损益后的净利润
    grossmargin = 420      #毛利
    grossmargin_ttm  = 421      #毛利(TTM
    or_ttm = 422      #营业收入(TTM
    net_cash_flows_oper  = 423      #经营活动产生的现金流量净额
    #//分红指标因子
    per_div_trans = 358      #每股分红送转
    per_cashpaidbeforetax    = 359      #每股股利(税前
    per_cashpaidaftertax = 360      #每股股利(税后
    per_dvdshr = 361      #每股红股
    per_increasedcapital = 362      #每股转增股本
    div_aualaccmdivpershare  = 363      #年度累计单位分红
    div_aualaccmdiv  = 364      #年度累计分红总额
    div_payoutratio  = 365      #年度现金分红比例
    div_divpct_3yearaccu = 366      #三年累计分红占比(再融资条件
    div_cashpaidaftertax = 367      #区间每股股利(税后
    div_cashpaidbeforetax    = 368      #区间每股股利(税前
    eqy_record_dt = 369      #股权登记日
    ex_dt = 370      #除权除息日
    dvd_payout_dt = 371      #派息日
    listing_dt_of_dvd_shr    = 372      #红股上市交易日
    s_div_predisclosure  = 373      #预披露公告日
    s_div_prelandate = 374      #预案公告日
    s_div_smtgdate = 375      #股东大会公告日
    dvd_ann_dt = 376      #分红实施公告日
    Beqy_lastdt = 377      #B股最后交易日
    Beqy_recorddt = 378      #B股股权登记日
    s_div_progress = 379      #分红方案进度
    div_target = 380      #分红对象
    div_if = 381      #是否分红
    per_cashpaidbeforetax_Declared = 382      #每股股利(税前(已宣告
    per_cashpaidaftertax_Declared  = 383      #每股股利(税后(已宣告
    per_dvdshr_Declared  = 384      #每股红股(已宣告
    per_increasedcapital_Declared  = 385      #每股转增股本(已宣告
    #//股票最新信息
    Short_name = 386           #股票简称
    Eng_Abbreviation = 387          #股票英文简称
    Listing_date = 388          #上市日期
    Listing_place    = 389          #上市地点
    Listing_board    = 390          #上市板
    Security_status  = 391          #证券存续状态
    Currency = 392          #交易币种
    Delisting_date   = 393          #摘牌日期
    Listing_chg_time = 394          #戴帽摘帽时间
    Stock_type = 395          #股票种类
    Con_sector = 396          #所属概念板块
    Key_indices_con  = 397          #是否属于重要指数成份
    SHHK_stk_conn   = 398           #是否沪港通买入标的
    SZHK_stk_conn   = 399           #是否深港通买入标的
    SHLON_stk_conn  = 400           #是否沪伦通买入标的
    CSRC_ind_name   = 401           #所属证监会行业名称
    CSRC_ind_code   = 402           #所属证监会行业代码
    Wind_ind_name    = 403          #所属Wind行业名称
    Wind_ind_code    = 404          #所属Wind行业代码
    Wind_ind_idx_code    = 405          #所属Wind指数代码
    SW_ind_name = 406           #所属申万行业名称
    SW_ind_code = 407           #所属申万行业代码
    SW_ind_idx_code  = 408          #所属申万行业指数代码
    CITIC_ind_name  = 409           #所属中信行业名称
    CITIC_ind_code  = 410           #所属中信行业代码
    Ind_name = 411          #所属行业名称
    Ind_name_his = 412          #所属行业名称（支持历史）
    Ind_code_his = 413          #所属行业代码（支持历史）
    Ind_sector_code_his  = 414          #所属行业板块代码（支持历史）
    CSRC_ind_name_old    = 415          #所属证监会行业名称（旧）
    CSRC_ind_code_old    = 416          #所属证监会行业代码（旧）

    #//财务报表因子
    stm_issuingdate = 356    #定期报告披露日期
    stm_predict_issuingdate  = 357       #定期报告预计披露日期
    monetary_cap  = 428    #货币资金
    tradable_fin_assets = 429    #交易性金融资产
    notes_rcv     = 430    #应收票据
    acct_rcv  = 431    #应收账款
    oth_rcv   = 432    #其他应收款
    prepay    = 433    #预付款项
    dvd_rcv   = 434    #应收股利
    int_rcv   = 435    #应收利息
    inventories   = 436    #存货
    consumptive_bio_assets = 437    #消耗性生物资产
    deferred_exp  = 438    #待摊费用
    non_cur_assets_due_within_1y = 439    #一年内到期的非流动资产
    settle_rsrv   = 440    #结算备付金
    loans_to_oth_banks = 441    #拆出资金
    prem_rcv  = 442    #应收保费
    rcv_from_reinsurer = 443    #应收分保账款
    rcv_from_ceded_insur_cont_rsrv = 444    #应收分保合同准备金
    red_monetary_cap_for_sale = 445    #买入返售金融资产
    oth_cur_assets = 446    #其他流动资产
    tot_cur_assets = 447    #流动资产合计
    fin_assets_avail_for_sale = 448    #可供出售金融资产
    held_to_mty_invest = 449    #持有至到期投资
    long_term_eqy_invest = 450    #长期股权投资
    invest_real_estate = 451    #投资性房地产
    time_deposits = 452    #定期存款
    oth_assets    = 453    #其他资产
    long_term_rec = 454    #长期应收款
    fix_assets    = 455    #固定资产
    const_in_prog = 456    #在建工程
    proj_matl     = 457    #工程物资
    fix_assets_disp = 458    #固定资产清理
    productive_bio_assets = 459    #生产性生物资产
    oil_and_natural_gas_assets = 460    #油气资产
    intang_assets = 461    #无形资产
    r_and_d_costs = 462    #开发支出
    goodwill  = 463    #商誉
    long_term_deferred_exp = 464    #长期待摊费用
    deferred_tax_assets = 465    #递延所得税资产
    loans_and_adv_granted = 466    #发放贷款及垫款
    oth_non_cur_assets = 467    #其他非流动资产
    tot_non_cur_assets = 468    #非流动资产合计
    cash_deposits_central_bank = 469    #现金及存放中央银行款项
    asset_dep_oth_banks_fin_inst = 470    #存放同业和其它金融机构款项
    precious_metals = 471    #贵金属
    derivative_fin_assets = 472    #衍生金融资产
    agency_bus_assets = 473    #代理业务资产
    subr_rec  = 474    #应收代位追偿款
    rcv_ceded_unearned_prem_rsrv = 475    #应收分保未到期责任准备金
    rcv_ceded_claim_rsrv = 476    #应收分保未决赔款准备金
    rcv_ceded_life_insur_rsrv = 477    #应收分保寿险责任准备金
    rcv_ceded_lt_health_insur_rsrv = 478    #应收分保长期健康险责任准备金
    mrgn_paid     = 479    #存出保证金
    insured_pledge_loan = 480    #保户质押贷款
    cap_mrgn_paid = 481    #存出资本保证金
    independent_acct_assets  = 482    #独立账户资产
    clients_cap_deposit = 483    #客户资金存款
    clients_rsrv_settle = 484    #客户备付金
    incl_seat_fees_exchange  = 485    #其中:交易席位费
    rcv_invest    = 486    #应收款项类投资
    tot_assets    = 487    #资产总计
    st_borrow     = 488    #短期借款
    borrow_central_bank = 489    #向中央银行借款
    deposit_received_ib_deposits = 490    #吸收存款及同业存放
    loans_oth_banks = 491    #拆入资金
    tradable_fin_liab = 492    #交易性金融负债
    notes_payable = 493    #应付票据
    acct_payable  = 494    #应付账款
    adv_from_cust = 495    #预收款项
    fund_sales_fin_assets_rp = 496    #卖出回购金融资产款
    handling_charges_comm_payable = 497    #应付手续费及佣金
    empl_ben_payable = 498    #应付职工薪酬
    taxes_surcharges_payable = 499    #应交税费
    int_payable   = 500    #应付利息
    dvd_payable   = 501    #应付股利
    oth_payable   = 502    #其他应付款
    acc_exp   = 503    #预提费用
    deferred_inc  = 504    #递延收益
    st_bonds_payable = 505    #应付短期债券
    payable_to_reinsurer = 506    #应付分保账款
    rsrv_insur_cont = 507    #保险合同准备金
    acting_trading_sec = 508    #代理买卖证券款
    acting_uw_sec = 509    #代理承销证券款
    non_cur_liab_due_within_1y = 510    #一年内到期的非流动负债
    oth_cur_liab  = 511    #其他流动负债
    tot_cur_liab  = 512    #流动负债合计
    lt_borrow     = 513    #长期借款
    bonds_payable = 514    #应付债券
    lt_payable    = 515    #长期应付款
    specific_item_payable = 516    #专项应付款
    provisions    = 517    #预计负债
    deferred_tax_liab = 518    #递延所得税负债
    deferred_inc_non_cur_liab = 519    #递延收益-非流动负债
    oth_non_cur_liab = 520    #其他非流动负债
    tot_non_cur_liab = 521    #非流动负债合计
    liab_dep_oth_banks_fin_inst = 522    #同业和其它金融机构存放款项
    derivative_fin_liab = 523    #衍生金融负债
    cust_bank_dep = 524    #吸收存款
    agency_bus_liab = 525    #代理业务负债
    oth_liab  = 526    #其他负债
    prem_received_adv = 527    #预收保费
    deposit_received = 528    #存入保证金
    insured_deposit_invest = 529    #保户储金及投资款
    unearned_prem_rsrv = 530    #未到期责任准备金
    out_loss_rsrv = 531    #未决赔款准备金
    life_insur_rsrv = 532    #寿险责任准备金
    lt_health_insur_v = 533    #长期健康险责任准备金
    independent_acct_liab = 534    #独立账户负债
    incl_pledge_loan = 535    #其中:质押借款
    claims_payable = 536    #应付赔付款
    dvd_payable_insured = 537    #应付保单红利
    tot_liab  = 538    #负债合计
    cap_stk   = 539    #股本
    cap_rsrv  = 540    #资本公积金
    special_rsrv  = 541    #专项储备
    surplus_rsrv  = 542    #盈余公积金
    undistributed_profit_b = 543    #未分配利润
    less_tsy_stk  = 544    #减:库存股
    prov_nom_risks = 545    #一般风险准备
    cnvd_diff_foreign_curr_stat = 546    #外币报表折算差额
    unconfirmed_invest_loss_b = 547    #未确认的投资损失
    minority_int  = 548    #少数股东权益
    tot_shrhldr_eqy_excl_min_int = 549    #股东权益合计(不含少数股东权益
    tot_shrhldr_eqy_incl_min_int = 550    #股东权益合计(含少数股东权益
    tot_liab_shrhldr_eqy = 551    #负债及股东权益总计
    actual_ann_dt = 552    #实际公告日期
    spe_cur_assets_diff = 553    #流动资产差额(特殊报表科目
    tot_cur_assets_diff = 554    #流动资产差额(合计平衡项目
    spe_non_cur_assets_diff  = 555    #非流动资产差额(特殊报表科目
    tot_non_cur_assets_diff  = 556    #非流动资产差额(合计平衡项目
    spe_bal_assets_diff = 557    #资产差额(特殊报表科目
    tot_bal_assets_diff = 558    #资产差额(合计平衡项目
    spe_cur_liab_diff = 559    #流动负债差额(特殊报表科目
    tot_cur_liab_diff = 560    #流动负债差额(合计平衡项目
    spe_non_cur_liab_diff = 561    #非流动负债差额(特殊报表科目
    tot_non_cur_liab_diff = 562    #非流动负债差额(合计平衡项目
    spe_bal_liab_diff = 563    #负债差额(特殊报表科目
    tot_bal_liab_diff = 564    #负债差额(合计平衡项目
    spe_bal_shrhldr_eqy_diff = 565    #股东权益差额(特殊报表科目
    tot_bal_shrhldr_eqy_diff = 566    #股东权益差额(合计平衡项目
    spe_bal_liab_eqy_diff = 567    #负债及股东权益差额(特殊报表项目
    tot_bal_liab_eqy_diff = 568    #负债及股东权益差额(合计平衡项目
    lt_payroll_payable = 569    #长期应付职工薪酬
    other_comp_income = 570    #其他综合收益
    other_equity_tools = 571    #其他权益工具
    other_equity_tools_p_shr = 572    #其他权益工具:优先股
    lending_funds = 573    #融出资金
    accounts_receivable = 574    #应收款项
    st_financing_payable = 575    #应付短期融资款
    payables  = 576    #应付款项
    tot_shr   = 577    #期末总股本
    hfs_assets    = 578    #持有待售的资产
    tot_oper_rev  = 579    #营业总收入
    oper_rev  = 580    #营业收入
    int_inc   = 581    #利息收入
    net_int_inc   = 582    #利息净收入
    insur_prem_unearned = 583    #已赚保费
    handling_chrg_comm_inc = 584    #手续费及佣金收入
    net_handling_chrg_comm_inc = 585    #手续费及佣金净收入
    net_inc_other_ops = 586    #其他经营净收益
    plus_net_inc_other_bus = 587    #加:其他业务净收益
    prem_inc  = 588    #保费业务收入
    less_ceded_out_prem = 589    #减:分出保费
    chg_unearned_prem_res = 590    #提取未到期责任准备金
    incl_reinsurance_prem_inc = 591    #其中:分保费收入
    net_inc_sec_trading_brok_bus = 592    #代理买卖证券业务净收入
    net_inc_sec_uw_bus = 593    #证券承销业务净收入
    net_inc_ec_asset_mgmt_bus = 594    #受托客户资产管理业务净收入
    other_bus_inc = 595    #其他业务收入
    plus_net_gain_chg_fv = 596    #加:公允价值变动净收益
    plus_net_invest_inc = 597    #加:投资净收益
    incl_inc_invest_assoc_jv_entp = 598    #其中:对联营企业和合营企业的投资收益
    plus_net_gain_fx_trans = 599    #加:汇兑净收益
    tot_oper_cost = 600    #营业总成本
    less_oper_cost = 601    #减:营业成本
    less_int_exp  = 602    #减:利息支出
    less_handling_chrg_comm_exp = 603    #减:手续费及佣金支出
    less_taxes_surcharges_ops = 604    #减:营业税金及附加
    less_selling_dist_exp = 605    #减:销售费用
    less_gerl_admin_exp = 606    #减:管理费用
    less_fin_exp  = 607    #减:财务费用
    less_impair_loss_assets  = 608    #减:资产减值损失
    prepay_surr   = 609    #退保金
    tot_claim_exp = 610    #赔付总支出
    chg_insur_cont_rsrv = 611    #提取保险责任准备金
    dvd_exp_insured = 612    #保户红利支出
    reinsurance_exp = 613    #分保费用
    oper_exp  = 614    #营业支出
    less_claim_recb_reinsurer = 615    #减:摊回赔付支出
    less_ins_rsrv_recb_reinsurer = 616    #减:摊回保险责任准备金
    less_exp_recb_reinsurer  = 617    #减:摊回分保费用
    other_bus_cost = 618    #其他业务成本
    oper_profit   = 619    #营业利润
    plus_non_oper_rev = 620    #加:营业外收入
    less_non_oper_exp = 621    #减:营业外支出
    il_net_loss_disp_noncur_asset = 622    #其中:减:非流动资产处置净损失
    tot_profit    = 623    #利润总额
    inc_tax   = 624    #所得税
    unconfirmed_invest_loss_p = 625    #未确认投资损失
    net_profit_incl_min_int_inc = 626    #净利润(含少数股东损益
    net_profit_excl_min_int_inc = 627    #净利润(不含少数股东损益
    minority_int_inc = 628    #少数股东损益
    other_compreh_inc = 629    #其他综合收益
    tot_compreh_inc = 630    #综合收益总额
    tot_compreh_inc_parent_comp = 631    #综合收益总额(母公司
    tot_compreh_inc_min_shrhldr = 632    #综合收益总额(少数股东
    ebit      = 633    #息税前利润
    ebitda    = 634    #息税折旧摊销前利润
    net_profit_after_ded_nr_lp = 635    #扣除非经常性损益后净利润
    net_profit_under_intl_acc_sta = 636    #国际会计准则净利润
    s_fa_eps_basic = 637    #基本每股收益
    s_fa_eps_diluted = 638    #稀释每股收益
    insurance_expense = 640    #保险业务支出
    spe_bal_oper_profit = 641    #营业利润差额(特殊报表科目
    tot_bal_oper_profit = 642    #营业利润差额(合计平衡项目
    spe_bal_tot_profit = 643    #利润总额差额(特殊报表科目
    tot_bal_tot_profit = 644    #利润总额差额(合计平衡项目
    spe_bal_net_profit = 645    #净利润差额(特殊报表科目
    tot_bal_net_profit = 646    #净利润差额(合计平衡项目
    undistributed_profit_p = 647    #年初未分配利润
    adjlossgain_prevyear = 648    #调整以前年度损益
    transfer_from_surplusreserve = 649    #盈余公积转入
    transfer_from_housingimprest = 650    #住房周转金转入
    transfer_from_others = 651    #其他转入
    distributable_profit = 652    #可分配利润
    withdr_legalsurplus = 653    #提取法定盈余公积
    withdr_legalpubwelfunds  = 654    #提取法定公益金
    workers_welfare = 655    #职工奖金福利
    withdr_buzexpwelfare = 656    #提取企业发展基金
    withdr_reservefund = 657    #提取储备基金
    distributable_profit_shrhder = 658    #可供股东分配的利润
    prfshare_dvd_payable = 659    #应付优先股股利
    withdr_othersurpreserve  = 660    #提取任意盈余公积金
    comshare_dvd_payable = 661    #应付普通股股利
    capitalized_comstock_div = 662    #转作股本的普通股股利
    cash_recp_sg_and_rs = 663    #销售商品、提供劳务收到的现金
    recp_tax_rends = 664    #收到的税费返还
    net_incr_dep_cob = 665    #客户存款和同业存放款项净增加额
    net_incr_loans_central_bank = 666    #向中央银行借款净增加额
    net_incr_fund_borr_ofi = 667    #向其他金融机构拆入资金净增加额
    cash_recp_prem_orig_inco = 668    #收到原保险合同保费取得的现金
    net_incr_insured_dep = 669    #保户储金净增加额
    net_cash_received_reinsu_bus = 670    #收到再保业务现金净额
    net_incr_disp_tfa = 671    #处置交易性金融资产净增加额
    net_incr_int_handling_chrg = 672    #收取利息和手续费净增加额
    net_incr_disp_faas = 673    #处置可供出售金融资产净增加额
    net_incr_loans_other_bank = 674    #拆入资金净增加额
    net_incr_repurch_bus_fund = 675    #回购业务资金净增加额
    other_cash_recp_ral_oper_act = 676    #收到其他与经营活动有关的现金
    stot_cash_inflows_oper_act = 677    #经营活动现金流入小计
    cash_pay_goods_purch_serv_rec = 678    #购买商品、接受劳务支付的现金
    cash_pay_beh_empl = 679    #支付给职工以及为职工支付的现金
    pay_all_typ_tax = 680    #支付的各项税费
    net_incr_clients_loan_adv = 681    #客户贷款及垫款净增加额
    net_incr_dep_cbob = 682    #存放央行和同业款项净增加额
    cash_pay_claims_orig_inco = 683    #支付原保险合同赔付款项的现金
    handling_chrg_paid = 684    #支付手续费的现金
    comm_insur_plcy_paid = 685    #支付保单红利的现金
    other_cash_pay_ral_oper_act = 686    #支付其他与经营活动有关的现金
    stot_cash_outflows_oper_act = 687    #经营活动现金流出小计
    net_cash_flows_oper_act  = 688    #经营活动产生的现金流量净额
    cash_recp_disp_withdrwl_invest = 689    #收回投资收到的现金
    cash_recp_return_invest  = 690    #取得投资收益收到的现金
    net_cash_recp_disp_fiolta = 691    #处置固定资产、无形资产和其他长期资产收回的现金净额
    net_cash_recp_disp_sobu  = 692    #处置子公司及其他营业单位收到的现金净额
    other_cash_recp_ral_inv_act = 693    #收到其他与投资活动有关的现金
    stot_cash_inflows_inv_act = 694    #投资活动现金流入小计
    cash_pay_acq_const_fiolta = 695    #购建固定资产、无形资产和其他长期资产支付的现金
    cash_paid_invest = 696    #投资支付的现金
    net_cash_pay_aquis_sobu  = 697    #取得子公司及其他营业单位支付的现金净额
    other_cash_pay_ral_inv_act = 698    #支付其他与投资活动有关的现金
    net_incr_pledge_loan = 699    #质押贷款净增加额
    stot_cash_outflows_inv_act = 700    #投资活动现金流出小计
    net_cash_flows_inv_act = 701    #投资活动产生的现金流量净额
    cash_recp_cap_contrib = 702    #吸收投资收到的现金
    incl_cash_rec_saims = 703    #其中:子公司吸收少数股东投资收到的现金
    cash_recp_borrow = 704    #取得借款收到的现金
    proc_issue_bonds = 705    #发行债券收到的现金
    other_cash_recp_ral_fnc_act = 706    #收到其他与筹资活动有关的现金
    stot_cash_inflows_fnc_act = 707    #筹资活动现金流入小计
    cash_prepay_amt_borr = 708    #偿还债务支付的现金
    cash_pay_dist_dpcp_int_exp = 709    #分配股利、利润或偿付利息支付的现金
    incl_dvd_profit_paid_sc_ms = 710    #其中:子公司支付给少数股东的股利、利润
    other_cash_pay_ral_fnc_act = 711    #支付其他与筹资活动有关的现金
    stot_cash_outflows_fnc_act = 712    #筹资活动现金流出小计
    net_cash_flows_fnc_act = 713    #筹资活动产生的现金流量净额
    eff_fx_flu_cash = 714    #汇率变动对现金的影响
    net_incr_cash_cash_equ = 715    #现金及现金等价物净增加额
    cash_cash_equ_beg_period = 716    #期初现金及现金等价物余额
    cash_cash_equ_end_period = 717    #期末现金及现金等价物余额
    net_profit    = 718    #净利润
    unconfirmed_invest_loss_c = 719    #未确认投资损失
    plus_prov_depr_assets = 720    #加:资产减值准备
    depr_fa_coga_dpba = 721    #固定资产折旧、油气资产折耗、生产性生物资产折旧
    amort_intang_assets = 722    #无形资产摊销
    amort_lt_deferred_exp = 723    #长期待摊费用摊销
    decr_deferred_exp = 724    #待摊费用减少
    incr_acc_exp  = 725    #预提费用增加
    loss_disp_fiolta = 726    #处置固定、无形资产和其他长期资产的损失
    loss_scr_fa   = 727    #固定资产报废损失
    loss_fv_chg   = 728    #公允价值变动损失
    fin_exp   = 729    #财务费用
    invest_loss   = 730    #投资损失
    decr_deferred_inc_tax_assets = 731    #递延所得税资产减少
    incr_deferred_inc_tax_liab = 732    #递延所得税负债增加
    decr_inventories = 733    #存货的减少
    decr_oper_payable = 734    #经营性应收项目的减少
    incr_oper_payable = 735    #经营性应付项目的增加
    others    = 736    #其他
    im_net_cash_flows_oper_act = 737    #间接法-经营活动产生的现金流量净额
    conv_debt_into_cap = 738    #债务转为资本
    conv_corp_bonds_due_within_1y = 739    #一年内到期的可转换公司债券
    fa_fnc_leases = 740    #融资租入固定资产
    end_bal_cash  = 741    #现金的期末余额
    less_beg_bal_cash = 742    #减:现金的期初余额
    plus_end_bal_cash_equ = 743    #加:现金等价物的期末余额
    less_beg_bal_cash_equ = 744    #减:现金等价物的期初余额
    im_net_incr_cash_cash_equ = 745    #间接法-现金及现金等价物净增加额
    free_cash_flow = 746    #企业自由现金流量(FCFF
#     actual_ann_dt = 747    #实际公告日期
    spe_bal_cash_inflows_oper = 748    #经营活动现金流入差额(特殊报表科目
    tot_bal_cash_inflows_oper = 749    #经营活动现金流入差额(合计平衡项目
    spe_bal_cash_outflows_oper = 750    #经营活动现金流出差额(特殊报表科目
    tot_bal_cash_outflows_oper = 751    #经营活动现金流出差额(合计平衡项目
    tot_bal_netcash_outflows_oper = 752    #经营活动产生的现金流量净额差额(合计平衡项目
    spe_bal_cash_inflows_inv = 753    #投资活动现金流入差额(特殊报表科目
    tot_bal_cash_inflows_inv = 754    #投资活动现金流入差额(合计平衡项目
    spe_bal_cash_outflows_inv = 755    #投资活动现金流出差额(特殊报表科目
    tot_bal_cash_outflows_inv = 756    #投资活动现金流出差额(合计平衡项目
    tot_bal_netcash_outflows_inv = 757    #投资活动产生的现金流量净额差额(合计平衡项目
    spe_bal_cash_inflows_fnc = 758    #筹资活动现金流入差额(特殊报表科目
    tot_bal_cash_inflows_fnc = 759    #筹资活动现金流入差额(合计平衡项目
    spe_bal_cash_outflows_fnc = 760    #筹资活动现金流出差额(特殊报表科目
    tot_bal_cash_outflows_fnc = 761    #筹资活动现金流出差额(合计平衡项目
    tot_bal_netcash_outflows_fnc = 762    #筹资活动产生的现金流量净额差额(合计平衡项目
    spe_bal_netcash_inc = 763    #现金净增加额差额(特殊报表科目
    tot_bal_netcash_inc = 764    #现金净增加额差额(合计平衡项目
    spe_bal_netcash_equ_undir = 765    #间接法-经营活动现金流量净额差额(特殊报表科目
    tot_bal_netcash_equ_undir = 766    #间接法-经营活动现金流量净额差额(合计平衡项目
    spe_bal_netcash_inc_undir = 767    #间接法-现金净增加额差额(特殊报表科目
    tot_bal_netcash_inc_undir = 768    #间接法-现金净增加额差额(合计平衡项目

    #//add by onefield 20170918
    s_qfa_yoyop                             =769    #单季度营业利润同比增长率
    s_qfa_yoyprofit                         =770    #单季度净利润同比增长率
    s_qfa_cgrsales                          =771    #单季度营业收入同比增长率
    s_val_pb_new                            =772      #市净率PB
    s_price_div_dps                         =773      #股价/每股派息
    net_assets_today                        =774      #当日净资产
    s_pq_high_52w_                          =775      #52周最高价
    s_pq_low_52w_                           =776      #52周最低价
    s_pq_adjhigh_52w                        =777      #52周最高价（复权）
    s_pq_adjlow_52w                         =778      #52周最低价（复权）
    net_profit_parent_comp_ttm              =779      #归属母公司净利润（TTM)
    net_profit_parent_comp_lyr              =780      #归属母公司净利润（LYR）
    net_cash_flows_oper_act_ttm             =781      #经营活动产生的现金流量净额（TTM）
    net_cash_flows_oper_act_lyr             =782      #经营活动产生的现金流量净额（LYR）
    oper_rev_ttm                            =783      #营业收入（TTM）
    oper_rev_lyr                            =784      #营业收入（LYR）
    net_incr_cash_cash_equ_ttm              =785      #现金及现金等价物净额增加额（TTM）
    net_incr_cash_cash_equ_lyr              =786      #现金及现金等价物净额增加额（LYR）
    up_down_limit_status                    =787      #涨跌停状态
    lowest_highest_status                   =788      #最高最低价状态
    a_mkt_cap                               =789      #A股市场总市值
    s_div_preanndt                                        =790      #预案预披露公告日（股东提议的公告日期）
    waa_roe                                 =791    #加权平均净资产收益率（ROE）
    dyr_12                                  =792    #股息率（近12月）                             
                                                   
        #//分钟数据                             
    open_min                                      =801      #分钟开盘价
    high_min                                         =802      #分钟最高价
    low_min                                          =803      #分钟最低价
    close_min                                        =804      #分钟收盘价
    volumn_min                                              =805      #分钟成交量           

    #//一致预期因子
    ISC_sys_class = 2001    #评级编号
    ISC_sys_content  = 2002    #评级内容
    ISC_remark = 2003    #评级备注
    BM_BlockType = 2004    #板块类型
    BM_BlockCode = 2005    #板块代码
    BM_StockCode = 2006    #股票代码
    BM_UseStatus = 2007    #使用状态
    CRD_CON_DATE = 2008    #一致预期日期
    CRD_ORGAN_ID = 2009    #报告机构ID
    CRD_RPT_DATE = 2010    #报告预测日期
    CRD_RPT_YEAR = 2011    #报告预测年
    CFS_TDATE = 2012    #预测日期（截止日期）（个股）
    CFS_c4_type = 2013    #净利润预测类型（个股）
    CFS_c1 = 2014    #一致预期EPS（个股）
    CFS_c3 = 2015    #2年复合增长率（个股）
    CFS_c4     =  2016    #一致预期归属母公司净利润（个股
    CFS_c5 =  2017    #一致预期PE（个股）
    CFS_c6 =  2018    #一致预期PE/G（个股）
    CFS_c7 =  2019    #一致预期净利同比（个股）
    CFS_c80 =  2020    #1周一致预期净利润变化率（个股?
    CFS_c81 =  2021    #4周一致预期净利润变化率（个股?
    CFS_c82 =  2022    #13周一致预期净利润变化率（个股
    CFS_c83 =  2023    #26周一致预期净利润变化率（个股
    CFS_c84 =  2024    #52周一致预期净利润变化率（个股
    CFS_c12 =  2025    #一致预期ROE（个股）
    CFS_cB =  2026    #一致预期净资产（个股）
    CFS_cPB =  2027    #一致预期PB（个股）
    CFI_TDATE =  2028    #预测日期（截止日期）（指数）
    CFI_c4_type = 2029    #净利润预测类型（指数）
    CFI_c1 =  2030    #一致预期EPS（指数）
    CFI_c3 =  2031    #2年复合增长率（指数）
    CFI_c4 =  2032    #一致预期归属母公司净利润（指数
    CFI_c5 =  2033    #一致预期PE（指数）
    CFI_c6 =  2034    #一致预期PE/G（指数）
    CFI_c7 =  2035    #一致预期净利同比（指数）
    CFI_c12 =  2036    #一致预期ROE（指数）
    CFI_cB =  2037    #一致预期净资产（指数）
    CFI_cPB =  2038    #一致预期PB（指数）
    CFSW_TDATE = 2039    #预测日期（截止日期）（申万）
    CFSW_c4_type = 2040    #净利润预测类型（申万）
    CFSW_c1 = 2041    #一致预期EPS（申万）
    CFSW_c3 = 2042    #2年复合增长率（申万）
    CFSW_c4 = 2043    #一致预期归属母公司净利润（申万
    CFSW_c5 = 2044    #一致预期PE（申万）
    CFSW_c6 = 2045    #一致预期PE/G（申万）
    CFSW_c7 = 2046    #一致预期净利同比（申万）
    CFSW_c12 = 2047    #一致预期ROE（申万）
    CFSW_cB = 2048    #一致预期净资产（申万）
    CFSW_cPB = 2049    #一致预期PB（申万）
    CFGICS_TDATE = 2050    #预测日期（截止日期）（GICS）
    CFGICS_c4_type = 2051    #净利润预测类型（GICS）
    CFGICS_c1 =  2052    #一致预期EPS（GICS）
    CFGICS_c3 =  2053    #2年复合增长率（GICS）
    CFGICS_c4 =  2054    #一致预期归属母公司净利润（GICS
    CFGICS_c5 =  2055    #一致预期PE（GICS）
    CFGICS_c6 =  2056    #一致预期PE/G（GICS）
    CFGICS_c7 =  2057    #一致预期净利同比（GICS）
    CFGICS_c12 = 2058    #一致预期ROE（GICS）
    CFGICS_cB =  2059    #一致预期净资产（GICS）
    CFGICS_cPB = 2060    #一致预期PB（GICS）
    CFZX_TDATE = 2061    #预测日期（截止日期）(中信
    CFZX_c4_type = 2062    #净利润预测类型(中信
    CFZX_c1 =  2063    #一致预期EPS(中信
    CFZX_c3 =  2064    #2年复合增长率(中信
    CFZX_c4 =  2065    #一致预期归属母公司净利润(中信
    CFZX_c5 =  2066    #一致预期PE(中信
    CFZX_c6 =  2067    #一致预期PE/G(中信
    CFZX_c7 =  2068    #一致预期净利同比(中信
    CFZX_c12 =  2069    #一致预期ROE(中信
    CFZX_cB =  2070    #一致预期净资产(中信
    CFZX_cPB =  2071    #一致预期PB(中信
    CFC2S_TDATE = 2072    #预测日期（截止日期）（个股）
    CFC2S_c2 =  2073    #滚动EPS（个股）
    CFC2S_c13 =  2074    #滚动净利润（个股）
    CFC2S_c9 =  2075    #滚动PE（个股）
    CFC2I_TDATE = 2076    #预测日期（截止日期）（指数）
    CFC2I_c13 =  2077    #滚动净利润（指数）
    CFC2I_c9 =  2078    #滚动PE（指数）
    CFC2SW_TDATE = 2079    #预测日期（截止日期）（申万）
    CFC2SW_c13 = 2080    #滚动净利润（申万）
    CFC2SW_c9 = 2081    #滚动PE（申万）
    CFC2GICS_TDATE = 2082    #预测日期（截止日期）（GICS）
    CFC2GICS_c13 = 2083    #滚动净利润（GICS）
    CFC2GICS_c9 = 2084    #滚动PE（GICS）
    CFC2ZX_TDATE = 2085    #预测日期（截止日期）(中信
    CFC2ZX_c13 =  2086    #滚动净利润(中信
    CFC2ZX_c9 =  2087    #滚动PE(中信
    CFC3S_TDATE = 2088    #预测日期（截止日期）（个股）
    CFC3S_cGB =  2089    #滚动净资产（个股）
    CFC3S_cGPB = 2090    #滚动市净率（滚动PB）（个股）
    CFC3S_cGG =  2091    #滚动净利润复合增长率（个股）
    CFC3S_cGPEG = 2092    #滚动PEG（个股）
    CFC3I_TDATE = 2093    #预测日期（截止日期）（指数）
    CFC3I_cGB =  2094    #滚动净资产（指数）
    CFC3I_cGPB = 2095    #滚动市净率（滚动PB）（指数）
    CFC3I_cGG =  2096    #滚动净利润复合增长率（指数）
    CFC3I_cGPEG = 2097    #滚动PEG（指数）
    CFC3SW_TDATE = 2098    #预测日期（截止日期）（申万）
    CFC3SW_cGB = 2099    #滚动净资产（申万）
    CFC3SW_cGPB = 2100    #滚动市净率（滚动PB）（申万）
    CFC3SW_cGG = 2101    #滚动净利润复合增长率（申万）
    CFC3SW_cGPEG = 2102    #滚动PEG（申万）
    CFC3GICS_TDATE = 2103    #预测日期（截止日期）（GICS）
    CFC3GICS_cGB = 2104    #滚动净资产（GICS）
    CFC3GICS_cGPB = 2105    #滚动市净率（滚动PB）（GICS）
    CFC3GICS_cGG = 2106    #滚动净利润复合增长率（GICS）
    CFC3GICS_cGPEG = 2107    #滚动PEG（GICS）
    CFC3ZX_TDATE = 2108    #预测日期（截止日期）(中信
    CFC3ZX_Cgb = 2109    #滚动净资产(中信
    CFC3ZX_cGPB = 2110    #滚动市净率（滚动PB）(中信
    CFC3ZX_cGG = 2111    #滚动净利润复合增长率(中信
    CFC3ZX_cGPEG = 2112    #滚动PEG(中信
    CFCBS_TDATE = 2113    #预测日期（截止日期）（个股）
    CFCBS_cB = 2114    #一致预期净资产（个股）
    CFCBS_cPB = 2115    #一致预期PB（个股）
    CFCBI_TDATE = 2116    #预测日期（截止日期）（指数）
    CFCBI_cB = 2117    #一致预期净资产（指数）
    CFCBI_cPB = 2118    #一致预期PB（指数）
    CFCBSW_TDATE = 2119    #预测日期（截止日期）（申万）
    CFCBSW_cB = 2120    #一致预期净资产（申万）
    CFCBSW_cPB = 2121    #一致预期PB（申万）
    CFCBGICS_TDATE = 2122    #预测日期（截止日期）（GICS）
    CFCBGICS_cB = 2123    #一致预期净资产（GICS）
    CFCBGICS_cPB = 2124    #一致预期PB（GICS）
    CFC3CS_TDATE = 2125    #预测日期（截止日期）（个股）
    CFC3CS_cGB = 2126    #滚动净资产（个股）
    CFC3CS_cGPB = 2127    #滚动市净率(滚动PB（个股）
    CFC3CI_TDATE = 2128    #预测日期（截止日期）（指数）
    CFC3CI_cGB = 2129    #滚动净资产（指数）
    CFC3CI_cGPB = 2130    #滚动市净率(滚动PB（指数）
    CFC3CSW_TDATE = 2131    #预测日期（截止日期）（申万）
    CFC3CSW_cGB = 2132    #滚动净资产（申万）
    CFC3CSW_cGPB = 2133    #滚动市净率(滚动PB（申万）
    CFC3CG_TDATE = 2134    #预测日期（截止日期）（GICS）
    CFC3CG_cGB = 2135    #滚动净资产（GICS）
    CFC3CG_cGPB = 2136    #滚动市净率(滚动PB（GICS）
    CFS_target_price = 2137    #一致预期目标价
    CFS_target_price_type = 2138    #目标价数据分类
    CFS_score    = 2139    #一致预期评级
    CFS_score_type = 2140    #评级数据分类
    CPI_Rpt_date = 2155    #预测报告年度（指数）
    CPI_PEI = 2156    #组合预期变动指数（指数）
    CPS_Rpt_date = 2157    #预测报告年度（申万）
    CPS_PEI = 2158    #组合预期变动指数（申万）
    CPG_Rpt_date = 2159    #预测报告年度（GICS）
    CPG_PEI = 2160    #组合预期变动指数（GICS）
    #//一致预期因子衍生数据
    up_number7 = 2164    #"个股周业绩上调家数"
    up_number30 = 2165       #"个股月业绩上调家数"
    up_number90 = 2166       #"个股季业绩上调家数"
    down_number7 = 2167       #"个股周业绩下调家数"
    down_number30  = 2168       #"个股月业绩下调家数"
    down_number90  = 2169       #"个股季业绩下调家数"
    rating_up_number7  = 2170       #"个股周评级上调家数"
    rating_up_number30 = 2171       #"个股月评级上调家数"
    rating_up_number90 = 2172       #"个股季评级上调家数"
    rating_down_number7    = 2173       #"个股周评级下调家数"
    rating_down_number30   = 2174       #"个股月评级下调家数"
    rating_down_number90   = 2175       #"个股季评级下调家数"
    report_number7 = 2176       #"个股周报告数"
    report_number30 = 2177       #"个股月报告数"
    report_number90 = 2178       #"个股季报告数"
    author_number7 = 2179       #"个股周关注研究员数"
    author_number30 = 2180       #"个股月关注研究员数"
    author_number90 = 2181       #"个股季关注研究员数"
    organ_number7  = 2182       #"个股周机构覆盖数"
    organ_number30 = 2183       #"个股月机构覆盖数"
    organ_number90 = 2184       #"个股季机构覆盖数"
    buy_number7 = 2185       #"个股周买入评级报告数"
    buy_number30 = 2186       #"个股月买入评级报告数"
    buy_number90 = 2187       #"个股季买入评级报告数"
    overweight_number7 = 2188       #"个股周收集评级报告数"
    overweight_number30    = 2189       #"个股月收集评级报告数"
    overweight_number90    = 2190       #"个股季收集评级报告数"
    neutral_number7 = 2191       #"个股周中性评级报告数"
    neutral_number30 = 2192       #"个股月中性评级报告数"
    neutral_number90 = 2193       #"个股季中性评级报告数"
    underweight_number7    = 2194       #"个股周派发评级报告数"
    underweight_number30   = 2195       #"个股月派发评级报告数"
    underweight_number90   = 2196       #"个股季派发评级报告数"
    sell_number7 = 2197       #"个股周卖出评级报告数"
    sell_number30  = 2198       #"个股月卖出评级报告数"
    sell_number90  = 2199       #"个股季卖出评级报告数"
    PE_deviation5  = 2200       #"组合5日一致预期PE偏离度"
    PE_deviation25 = 2201       #"组合25日一致预期PE偏离度"
    PE_deviation75 = 2202       #"组合75日一致预期PE偏离度"
    PB_deviation5  = 2203       #"组合5日一致预期PB偏离度"
    PB_deviation25 = 2204       #"组合25日一致预期PB偏离度"
    PB_deviation75 = 2205       #"组合75日一致预期PB偏离度"
    forward_PE_deviation5  = 2206       #"组合5日一致预期滚动PE偏离度"
    forward_PE_deviation25 = 2207       #"组合25日一致预期滚动PE偏离度"
    forward_PE_deviation75 = 2208       #"组合75日一致预期滚动PE偏离度"
    forward_PB_deviation5  = 2209       #"组合5日一致预期滚动PB偏离度"
    forward_PB_deviation25 = 2210       #"组合25日一致预期滚动PB偏离度"
    forward_PB_deviation75 = 2211       #"组合75日一致预期滚动PB偏离度"
    diversity = 2212       #"分岐度"
    EPS_deviation5 = 2213       #"5日EPS偏离度"
    EPS_deviation25 = 2214       #"25日EPS偏离度"
    EPS_deviation75 = 2215       #"75日EPS偏离度"
    NI_deviation5  = 2216       #"5日净利润偏离度"
    NI_deviation25 = 2217       #"25日净利润偏离度"
    NI_deviation75 = 2218       #"75日净利润偏离度"
    EPS_STDEV5 = 2219       #"5日预期EPS标准差"
    EPS_STDEV25 = 2220       #"25日预期EPS标准差"
    EPS_STDEV75 = 2221       #"75日预期EPS标准差"
    NI_STDEV5 = 2222       #"5日预期净利润标准差"
    NI_STDEV25 = 2223       #"25日预期净利润标准差"
    NI_STDEV75 = 2224       #"75日预期净利润标准差"
    CSD_PE_deviation5  = 2225       #"个股5日一致预期PE偏离度"
    CSD_PE_deviation25 = 2226       #"个股25日一致预期PE偏离度"
    CSD_PE_deviation75 = 2227       #"个股75日一致预期PE偏离度"
    CSD_PB_deviation5  = 2228       #"个股5日一致预期PB偏离度"
    CSD_PB_deviation25 = 2229       #"个股25日一致预期PB偏离度"
    CSD_PB_deviation75 = 2230       #"个股75日一致预期PB偏离度"
    CSD_forward_PE_deviation5  = 2231       #"个股5日一致预期滚动PE偏离度"
    CSD_forward_PE_deviation25 = 2232       #"个股25日一致预期滚动PE偏离度"
    CSD_forward_PE_deviation75 = 2233       #"个股75日一致预期滚动PE偏离度"
    CSD_forward_PB_deviation5  = 2234       #"个股5日一致预期滚动PB偏离度"
    CSD_forward_PB_deviation25 = 2235       #"个股25日一致预期滚动PB偏离度"
    CSD_forward_PB_deviation75 = 2236       #"个股75日一致预期滚动PB偏离度"
    relative_report_number10   = 2237       #"股10日相对报告数"
    relative_report_number25   = 2238       #"个股25日相对报告数"
    relative_report_number75   = 2239       #"个股75日相对报告数"
    organ_number10 = 2240       #"个股10日机构覆盖数"
    organ_number25 = 2241       #"个股25日机构覆盖数"
    organ_number75 = 2242       #"个股75日机构覆盖数"
    degree = 2243       #"标准差"
    consensus_confidence5  = 2244       #"个股5日市场信心"
    consensus_confidence10 = 2245       #"个股10日市场信心"
    consensus_confidence15 = 2246       #"个股15日市场信心"
    consensus_confidence25 = 2247       #"个股25日市场信心"
    consensus_confidence75 = 2248       #"个股75日市场信心"
    optimism_confidence5   = 2249       #"个股5日乐观者信心"
    optimism_confidence10  = 2250       #"个股10日乐观者信心"
    optimism_confidence15  = 2251       #"个股15日乐观者信心"
    optimism_confidence25  = 2252       #"个股25日乐观者信心"
    optimism_confidence75  = 2253       #"个股75日乐观者信心"
    pessimism_confidence5  = 2254       #"个股5日悲观者信心"
    pessimism_confidence10 = 2255       #"个股10日悲观者信心"
    pessimism_confidence15 = 2256       #"个股15日悲观者信心"
    pessimism_confidence25 = 2257       #"个股25日悲观者信心"
    pessimism_confidence75 = 2258;       #"个股75日悲观者信心"





## Description 根据输入的时间区间、日期类型查询该时间段内的交易日期列表
## Inputs:
#     startTime：开始日期，格式yyyymmdd,例如: 20100861
#     endTime：  结束日期，格式yyyymmdd,例如: 20100861
#     frequency：数据频率，枚举整数类型，默认值：FrequencyType.DAY。
#       当frequency参数为 FrequencyType.DAY时，平台支持以startTime为起点，前后n日的时间序列查询(abs(n) < 10000)，
#       例如，查询以20150504前10个交易日的序列，可以输入：tradingDay(20120504, -10)，后面20日：tradingDay(20120504, 20)。
#     dayType：日期类型，枚举整数类型，当frequency 参数为FrequencyType.WEEK 时，默认值为DayType.FRIDAY；当frequency 参数为其它值，默认值为DayType.FIRSTDAY。
#     dateType：日历类型，枚举整数类型，默认值为DateType.TRADINGDAYS。
#     market：市场类型，枚举整数类型，默认值：MarketType.SH。暂时指定了两个市场，后续再拓展
## Outputs:
#   tradingDate： 交易日期，double类型列表
def tradingDay(startTime,endTime,frequencyType=FrequencyType.DAY,dayType=DayType.LASTDAY,dateType=DateType.TRADINGDAYS,marketType=MarketType.SH):
    if startTime is None or endTime is None or startTime == [] or endTime == [] :
        print('[tradingDay]参数startTime、endTime为空，请重新输入！')
        return
    if list == type(startTime):
        startTime = startTime[0]
    if list == type(endTime):
        endTime = endTime[0]
    if list == type(frequencyType):
        frequencyType = frequencyType[0]
    if list == type(dayType):
        dayType = dayType[0]
    if list == type(dateType):
        dateType = dateType[0]
    if list == type(marketType):
        marketType = marketType[0]

    if not isinstance(startTime,int) or not isinstance(endTime,int) :
        print('[tradingDay]参数startTime、endTime非整数型，请重新输入！')
        return
    if frequencyType == FrequencyType.WEEK and dayType == DayType.LASTDAY:
        dayType = DayType.FRIDAY
    if not isinstance(frequencyType,FrequencyType):
        print('[tradingDay]输入参数frequencyType非正确枚举类型，请重新输入！')
        return
    if not isinstance(dayType,DayType):
        print('[tradingDay]输入参数dayType非正确枚举类型，请重新输入！')
        return
    if not isinstance(dateType,DateType):
        print('[tradingDay]输入参数dateType非正确枚举类型，请重新输入！')
        return
    if not isinstance(marketType,MarketType):
        print('[tradingDay]输入参数marketType非正确枚举类型，请重新输入！')
        return

    method = 1
    if frequencyType == FrequencyType.DAY:
        if endTime > 19900000:
            method = 1
        elif abs(endTime) < 10000:         #前后多少天的查询方式
            method = 2
            tmpTime = endTime
            if dateType == DateType.TRADINGDAYS:
                if endTime >= 0:
                    endTime   = int((datetime.datetime.strptime(str(startTime),'%Y%m%d')  + datetime.timedelta(tmpTime + 121 * math.ceil(endTime/365))).strftime('%Y%m%d'))
                else:
                    tmpTime   = endTime
                    endTime   = startTime
                    startTime = int((datetime.datetime.strptime(str(endTime),'%Y%m%d') + datetime.timedelta(tmpTime + 121 * math.floor(tmpTime/365))).strftime('%Y%m%d'))
            else:
                if endTime >= 0:
                    endTime = int((datetime.datetime.strptime(str(startTime),'%Y%m%d')  + datetime.timedelta(endTime - 1)).strftime('%Y%m%d'))
                else:
                    tmpTime   = endTime
                    endTime   = startTime
                    startTime = int((datetime.datetime.strptime(str(endTime),'%Y%m%d')  + datetime.timedelta(tmpTime + 1)).strftime('%Y%m%d'))
        else:
            print('[tradingDay]参数endTime输入值超出有范围，请重新输入!')
            return

    if frequencyType == FrequencyType.WEEK and dayType not in [DayType.MONDAY,DayType.TUESDAY,DayType.WEDNESDAY,DayType.THURSDAY,DayType.FRIDAY]:
        print('[tradingDay]当参数frequencyType为WEEK时，dayType只能为[DayType.MONDAY,DayType.FRIDAY]中数值，请重新输入！')
        return

    if frequencyType in [FrequencyType.MONTH,FrequencyType.QUARTER,FrequencyType.HALFYEAR,FrequencyType.YEAR] and  (dayType != DayType.FIRSTDAY and dayType != DayType.LASTDAY):
        print('[tradingDay]当参数frequencyType为MONTH,QUARTER, HALF YAER, YEAR时，dayType只能为[DayType.FIRSTDAY,DayType.LASTDAY]中数值，请重新输入！')
        return

    if startTime > endTime:
        print('[tradingDay]参数startTime输入值大于参数endTime输入值，请重新输入!')
        return

    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    url = dbPath + 'getTradingDays'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    #传递参数获取数据
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'startdatetime':str(startTime), 'enddatetime':str(endTime), 'frequencytype':str(frequencyType.value), 'daytype':str(dayType.value),
     'datetype':str(dateType.value),  'markettype':str(marketType.value) })
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    beginoffset = data.find(';')
    data = ('['+data[beginoffset+1:-1] +']').replace(';',',')
    data=eval(data)
    if 2 == method:
        if tmpTime > 0:
            data =  data[:tmpTime]
        else:
            data =  data[len(data)+tmpTime:]

    return data

## Description 根据输入的板块类型、日期及板块代码查询该板块的成分股信息
## Inputs:
#   plateType：  板块类型，枚举数据，例如： PlateType.INDEX
#   dateTime：  查询日期,数值型，例如：20151231
#   plateID：   板块代码，当plateType为INDEX时，plateID输入为指数代码，枚举整数类型，例如：IndexType.HS300。
#           当plateType为MARKET时，plateID输入为市场代码枚举，例如MarketType.SZA。
#           当参数plateType 为行业板块时，plateID为行业代码，具体需参见CITICS，SW等行业枚举定义，输入例如：CITICS.b106040700
## Outputs:
#   StockList：  股票代码列表，3行List：股票代码，股票名称，股票权重。
def hset(plateType=PlateType.INDEX,dateTime=int(datetime.date.today().strftime("%Y%m%d")),plateID=IndexType.HS300):
    if plateType == []:
        print('[hset函数]参数plateType为空，请重新输入！')
        return
    if list == type(dateTime):
        dateTime = dateTime[0]
    if list == type(plateType):
        plateType = plateType[0]
    if list == type(plateID):
        plateID = plateID[0]

    if not isinstance(plateType,PlateType):
        print('[hset函数]输入参数plateType非正确类型，请重新输入！')
        return

    if plateType == PlateType.INDUSTRY:
        if not (isinstance(plateID,CITICS) or isinstance(plateID,SW) or isinstance(plateID,CSRC)):
            print('[hset]当参数plateType为PlateType.INDUSTRY，plateID需为行业分类CITICS、CSRC或者SW行业代码枚举值，请重新输入！')
            return
    elif  plateType == PlateType.INDEX:
        if not isinstance(plateID,IndexType):
            print('[hset]当参数plateType为PlateType.INDEX时，plateID需为指数代码枚举值，请重新输入！')
            return
    elif  plateType == PlateType.MARKET:
        if not isinstance(plateID,MarketType):
            print('[hset]当参数plateType为PlateType.MARKET，plateID需为市场代码枚举值，请重新输入！')
            return
    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    if  plateType==PlateType.INDUSTRY:
        industrycode = plateID.name
        if plateID.value < 1000:
            industryType = IndustryType.CSRC              #证监会行业分类
            industrycode = industrycode[1:len(industrycode)]            #枚举编码的时候多写了一个c在前面，在数据库中查询时需要过滤掉
        elif 1000 <= plateID.value < 2000:
            industryType = IndustryType.CITICS           #中信行业分类
        elif 2000 <= plateID.value < 3000:
            industryType = IndustryType.SW                #申万行业分类
            industrycode = industrycode[1:len(industrycode)]            #枚举编码的时候多写了一个s在前面，在数据库中查询时需要过滤掉

        url = dbPath + 'getStockSetBySector'
        parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'datetime':str(dateTime),'sectorid':industrycode,'industryid':str(industryType.value)})
    elif  plateType==PlateType.MARKET:
        url = dbPath + 'getStockSetA'
        parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'datetime':str(dateTime),'sectorid':str(plateID.value)})
    elif  plateType==PlateType.INDEX:
        url = dbPath + 'getWeightSetByIndex'
        parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'datetime':str(dateTime),'indextype':str(plateID.value)})
    else:
        print('[hset]函数暂不支持该模式数据提取，请联系开发人员！')
        return
    #传递参数获取数据
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    beginoffset = data.find(';')
    if 0 < beginoffset:
        data = ('[['+data[beginoffset+1:-1] +']]').replace(';','],[')
        data = eval(data)
        data = list(map(list,zip(*data)))
    else:
        data = []
    return data

def hsi(stockList=[],dateTime=int(datetime.date.today().strftime("%Y%m%d")),industryType=0):
    if stockList == []:
        print('[hsi函数]参数stockList为空，请重新输入！')
        return
    if list == type(dateTime):
        dateTime = dateTime[0]
    if list != type(stockList):
        stockList = [stockList]

    if 0 != industryType and not isinstance(industryType,IndustryType):
        print('[hsi函数]输入参数industryType非正确类型，请重新输入！')
        return

    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    url = dbPath + 'getIndustryClassBySymbols'
    jssblst = ','.join(stockList)
    jssblst = '['+jssblst.replace(',','],[')+']'
    jssblst = jssblst.replace('[','["')
    jssblst = '['+jssblst.replace(']','"]')+']'
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'datetime':str(dateTime),'jssymbols':jssblst})
    #传递参数获取数据
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    beginoffset = data.find(';')
    if 0 < beginoffset:
        data = ('[['+data[beginoffset+1:-1] +']]').replace(';','],[')
        data = eval(data)
    else:
        return []

    #过滤掉第二列日期
    data = [[x[0],x[2],x[3],x[4]] for x in data]
    if 0 == industryType:
        data = [x for x in data if x[3] != 'WIND']
    else:
        #根据行业类别提取相应的数据
        if IndustryType.SW == industryType:
            data = [x for x in data if x[3] == 'SW']
        elif IndustryType.CSRC == industryType:
            data = [x for x in data if x[3] == 'CSRC']
        else:
            data = [x for x in data if x[3] == 'CITICS']
    return data

## Description 本API用于过滤股票池中不符合条件的股票。一共两层过滤，第一次过滤掉STPT，停牌，开盘涨停等股票，第二层过滤是根据EPS，PE等指标的取值范围过滤。
## Inputs:
#   stockPool：  股票代码列表，例如：{'000001.SZ';'601688.SH'};
#   filterDate： 查询日期,数值型，例如：20151231
#   filterType： 过滤类型，为枚举类型，过滤类型，枚举字段，默认为过滤掉STPT，停牌，开盘涨停的股票，引用格式：StockFilterType.SSO
#   filterFactors：    可选的过滤指标列表，cell类型列向量，因子内容为枚举数据，例如：[Factors.eps_basic;Factors.roe_diluted]
#   factorFloorValue： 过滤因子指标下限值，列向量，顺序须与filterFactors中因子顺序一致，例如：[1;0.6]。
#   factorCeilValue：  过滤因子指标上限值，列向量，顺序须与filterFactors中因子顺序一致，例如：[1;2.6]。
## Outputs:
#   stkcdList       - 股票代码列表，cell数组
def stockFilter(stockPool=[], dateTime=int(datetime.date.today().strftime("%Y%m%d")), filterType=StockFilterType.SSO, filterFactors=[], factorFloorValue=[], factorCeilValue=[]):
    if stockPool == []:
        print('[stockFilter函数]参数stockList为空，请重新输入！')
        return
    if list != type(stockPool):
        stockPool = [stockPool]
    if list != type(filterFactors):
        filterFactors = [filterFactors]
    if list != type(factorFloorValue):
        factorFloorValue = [factorFloorValue]
    if list != type(factorCeilValue):
        factorCeilValue = [factorCeilValue]
    if list == type(filterType):
        filterType = filterType[0]
    if list == type(dateTime):
        dateTime = dateTime[0]

    if filterType != [] and not isinstance(filterType,StockFilterType):
        print('[stockFilter函数]输入参数filterType非正确类型，请重新输入！')
        return
    if filterFactors !=[] and False in [isinstance(x,Factors) for x in filterFactors]:
        print('[stockFilter函数]输入参数filterFactors非正确类型，请重新输入！')
        return
    if True in [filterFactors == [],factorFloorValue == [],factorCeilValue == []] and True in [filterFactors != [],factorFloorValue != [],factorCeilValue != []]:
        print('[stockFilter函数]输入参数filterFactors,factorFloorValue,factorCeilValue必须同时为空或同时非空，请重新输入！')
        return
    if filterFactors != [] and (len(filterFactors) != len(factorFloorValue) or  len(filterFactors) != len(factorCeilValue)):
        print('[stockFilter函数]输入参数filterFactors,factorFloorValue,factorCeilValue维数不等，请重新输入！')
        return

    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    url = dbPath + 'filterSymbols'
    #拼代码字符串
    jssblst = ','.join(stockPool)
    jssblst = '['+jssblst.replace(',','],[')+']'
    jssblst = jssblst.replace('[','["')
    jssblst = '['+jssblst.replace(']','"]')+']'
    #拼查询条件字符串
    a = ['{"FACTOR":"']*len(filterFactors)
    b = ['","lstparam":[{"PNAME":"intervaltype","PVALUE":"']*len(filterFactors)
    c = ['"}]}']*len(filterFactors)
    d = [a,[x.name for x in filterFactors],b,[str(x) for x in factorFloorValue],[',']*len(filterFactors),[str(x) for x in factorCeilValue],c]
    e = list(map(list,zip(*d)))
    jsfactorlist = '['+','.join([''.join(x) for x in e])+']'
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'startdatetime':str(dateTime),'enddatetime':str(dateTime),'filtertype':str(filterType.value),'jssymbols':jssblst,'jsfactors':jsfactorlist})
    #传递参数获取数据
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    beginoffset = data.find(';')
    if 0 < beginoffset:
        data = ('[['+data[beginoffset+1:-1] +']]').replace(';','],[')
        data = eval(data)
        #过滤掉第二列日期
        data = [[x[0],x[2]] for x in data]
        data = list(map(list,zip(*data)))
    else:
        return []
    return data

## Description 根据用户ID和Session查询数据表名
## Inputs:
## Outputs:
#   tableList： 数据表名列表
def queryUserTables():
    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    url = dbPath + 'queryUserTables'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    #传递参数获取数据
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr})
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    data = ('[['+data[1:-1] +']]').replace(';','],[')
    data=eval(data)
    return data

## Description 根据用户ID和Session、数据表名返回数据表字段信息
## Inputs:
#   tablename：      数据表名，例如：QD_INDEX_WEIGHTS
## Outputs:
#   tableInfoList：  数据表信息，3行List，包括字段名称、字段类型、备注信息三列。
def queryUserTableInfo(tablename):
    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    url = dbPath + 'queryUserTableInfo'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    #传递参数获取数据
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'tablename':tablename})
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    data = ('[['+data[1:-1] +']]').replace(';','],[')
    data=eval(data)
    return data

## Description 本API将根据用户传入的SQL语句，返回结果数据集。
## Inputs:
#   sqlStr：     sql语句字符串，例如：select * from app_finance_news_amount where rownum <=10;
#   dataNumber： 数据记录条数 ,0表示不限制，其他数字表示返回的数据条数，不足dataNumber的数目时，返回全部记录，默认返回1000条。
## Outputs:
#   factorData： 查询的结果数据集，多行List，第一行为列名称。
def queryUserTableData(sqlStr='',rownum=1000):
    if sqlStr == '':
        print('[queryUserTableData函数]参数queryUserTableData为空，请重新输入！')
        return
    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    url = dbPath + 'queryUserTableDataset'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    #传递参数获取数据
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'rownum':str(rownum),'strsql':sqlStr})
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    data = ('[['+data[1:-1] +']]').replace(';','],[')
    data=eval(data)
    return data

## Description 读注册表返回用户ID，用户IP，用户Session
## Inputs:
## Outputs:
#   userid： 用户ID字符串
#   ipaddr： 用户IP字符串
#   session： 用户session字符串
def getQPUserInfo():
    try:
        key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,r"SOFTWARE\Wow6432Node\QuantPF")
        userid,type = winreg.QueryValueEx(key,"userid")
        session,type = winreg.QueryValueEx(key,"session")
        ipaddr,type = winreg.QueryValueEx(key,"ipaddr")
    except:
        try:
            key,type = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE,r"SOFTWARE\QuantPF")
            userid,type = winreg.QueryValueEx(key,"userid")
            session,type = winreg.QueryValueEx(key,"session")
            ipaddr,type = winreg.QueryValueEx(key,"ipaddr")
        except:
            userid = '000000'
            session = 'Invalid session'
            ipaddr = 'Invalid IP'
    return userid,session,ipaddr

## Description:
#   本API用于查询指定股票列表的时间序列因子数据，或者横截面因子数据。通过输入股票列表、因子列表以及起止日期，输出不同因子类型下的因子数值。
## Inputs:
# 	stockList ： 股票代码列表，字符型cell列向量，例如：{‘000001.SZ’;’601688.SH’};
# 	factorList ： 因子名称列表，枚举列向量，例如：[Factors.high;Factors.low]。详情请见因子列表;
#       dateList:	数据日期列表，数值型列向量，格式 yyyymmdd,例如: [20100861;20100921]
#                 对于区间计算的因子，或者N日统计的因子，只需要传入两个时间即可：
#                 1）对于区间计算的因子，传入[开始时间; 结束时间]即可，例如要统计 20120314到20120514之间的日均成交量，则输入[20120314;20120514]即可;
#                 2）对于N日计算的因子，传入[开始时间; N日]即可，例如要统计 20120314后面10天换手率，则输入[20120314;10]即可，当需要查询前面10天的时候，输入[20120314;-10]即可;
#                   注：1）当查询周数据时，请传入6位日期数字，yyyyww，表示第yyyy年第ww周，例如：[201512;201602]，表示2015年第12周和2016年第2周；
#                       2）当查询月数据时，请传入6位日期数字，yyyymm，表示第yyyy年第mm月，例如：[201512;201602]，表示2015年12月和2016年2月；
#                       3）当查询年数据时，请传入4位日期数据，yyyy，表示第几年，例如：[2015;2016]，表示2015年和2016年。
#                 3）对于一致预期衍生因子，传入[报告起始披露日期; 预测年度]即可，例如传入:[20120702;2013]即可查询出20120702以后所有预测的2013年的因子数据；
#                 当要查询预测年度的所有数据时，报告披露日期为nan即可，例如: [nan;2013]；对某些没有预测年度的因子，预测年度值置为nan即可，例如：[20120702;nan]。
#       factorPar： 特殊参数类型，枚举类型列向量，如无特殊需求可不填。
## Outputs:
#       factorData，因子数据，多维List，第一层是查询因子列表，第二层是因子名称及因子数值，第三层是因子数值二维List，其行为股票代码索引，列为日期索引。
#            因子数据矩阵的行索引、列索引请见stkCodeList、resultDateList两个数组。
#       stkCodeList, 股票代码列表，cell类型列向量
#       resultDateList,	查询结果日期列表，数值型列向量，格式 yyyymmdd,例如: [20100861,20100921]
#         温馨提示： 为了加快查询速度，系统对输入的股票代码、日期进行了去除空格、过滤重复项、统一大小写等处理，
#         会导致输出的stockCodeList、resultDateList与输入的stkcdList, dateList数据内容可能不一致，使用因子的索引请以最终输出的stkcdList, dateList为准。
def hfactor(stockList=[], factorList=[], dateList=[], factorPar=[]):
    if stockList == [] or factorList == [] or dateList == []:
        print('[hfactor函数]参数stockList、factorList或dateList为空，请重新输入！')
        return
    if list != type(stockList):
        stockList = [stockList]
    if list != type(factorList):
        factorList = [factorList]
    if list != type(dateList):
        dateList = [dateList]
    if list != type(factorPar):
        factorPar = [factorPar]
    if factorPar != [] and False in [isinstance(x,FactorType) for x in factorPar]:
        print('[hfactor函数]输入参数factorPar非正确类型，请重新输入！')
        return
    if factorList != [] and False in [isinstance(x,Factors) for x in factorList]:
        print('[hfactor函数]输入参数factorList非正确类型，请重新输入！')
        return
    #获取数据服务器连接信息
    dbPath = 'http://eip.htsc.com.cn/QuantiveService/DataSetService/'
    urlVersion = '0161'
    userid,session,ipaddr = getQPUserInfo() #获取用户登录信息
    url = dbPath + 'getFactors'
    #判断查询类型
    factorList = list(set(factorList))
    lenFactor = len(factorList)
    factorValue = [x.value for x in factorList]
    dataExtractType = 0                      #0表示普通查询，1表示区间统计，2表示N日计算，3表示一致预期个股数据查询，4表示一致预期个股或板块的某一年度所有预测数据查询
    if True in [(81 <=x<= 109) or (151 <=x<= 164) or (367 <=x<= 368) for x in factorValue]:   #区间统计因子，后面只带一个参数
        dataExtractType = 1
    elif True in [(110 <= x<= 123) or (338 <= x <= 355) for x in factorValue]:    #以某个时间点计算N日指标，后面只带一个参数
        dataExtractType = 2
        if dateList[1] > 10000 or dateList[1] < -10000:
            print('[hfactor]输入的N值太大，超出现有数据时间范围，请重新输入!')
            return
    elif True in [386 <= x <= 416 for x in factorValue]:                        #股票最新信息查询，后面不带参数，日期默认为历史最早日期
        dateList       = [19700101,19700101]
        dataExtractType = 1
    elif True in [2001 <= x <= 2258 for x in factorValue]:
        dataExtractType      = 3                                                   #提取个股或板块某一天的一致预期数据，后面可能有两个参数
        if 9 == len(stockList[0]):
            stockList = [y[0] for y in [x.split('.') for x in stockList]]       #朝阳永续数据库中的代码长度不规范，而万得数据库中代码后缀是.SZ和.SH，输入标准参考万得代码规范
        if dateList[0] is None:
            dataExtractType  = 4                                                   #提取个股或板块某一年的所有一致预期数据
            dateList   = [19800101,dateList[1]]
        if dateList[1] is None:                                                   #提取个股或板块某一个截止日期的一致预期数据
            dateList   = [dateList[0],19800101]
    #获取参数类型及数值列表
    stockList = sorted(list(set(stockList)))
    factorPar   = list(set(factorPar))
    parValue = [x.value for x in factorPar]
    factorName = [x.name for x in factorList]
    factorList = [factorName]
    #拼参数列表
    if factorPar != []:
        #拼因子矩阵，按照与下游的协议，每个因子指标后面给出一列参数字段值，再给出一列具体数值
        if 2 >= dataExtractType:
            if 10 >= parValue[0]:                          # 0~10之间是行情数据枚举值，详情可以查阅 PriceType.m
                factorList.append(['priceType']*lenFactor)
                factorList.append([str(parValue[0])]*lenFactor)
            elif 20 >= parValue[0]:                      # 10~20之间是财务报表数据枚举值，详情可以查阅 ReportType.m
                factorList.append(['reportType']*lenFactor)
                factorList.append([str(parValue[0]-10)]*lenFactor)
            elif 40 >= parValue[0]:                      # 31~40之间是除权出息基准日期枚举值，详情可以查阅 DivdDateType.m
                factorList.append(['divdDateType']*lenFactor)
                factorList.append([str(parValue[0]-30)]*lenFactor)
            else:
                if 2 == dataExtractType:                 #N日查询或者区间统计
                    factorList.append(['fcount']*lenFactor)
                    factorList.append([str(dateList[1])]*lenFactor)
        elif 3 <= dataExtractType:             #一致预期数据
            if 80 >= parValue[0]:                      # 51~80之间是一致预期组合枚举值，详情可以查阅 FactorType.m
                codeType = ['stocktype']*lenFactor
                b = [x for x in range(lenFactor) if 2200<=factorValue[x]<=2212]
                if b != []:
                    for x in b:
                        codeType[x] = 'blocktype'
                factorList.append(codeType)
                factorList.append([str(parValue[0]-50)]*lenFactor)
                factorList.append(['rpttype']*lenFactor)
                factorList.append(['4']*lenFactor)
            elif 90 >= parValue[0]:
                factorList.append(['rpttype']*lenFactor)
                factorList.append([str(parValue[0]-80)]*lenFactor)
            elif 100 >= parValue[0]:
                factorList.append(['contype']*lenFactor)
                factorList.append([str(parValue[0]-90)]*lenFactor)
                factorList.append(['rpttype']*lenFactor)
                factorList.append(['4']*lenFactor)

            if 2 == len(factorPar):
                if 80 >= parValue[1]:                             # 51~80之间是一致预期组合类型枚举值，详情可以查阅 FactorType.m
                    codeType = ['stocktype']*lenFactor
                    b = [x for x in range(lenFactor) if 2200<=factorValue[x]<=2212]
                    if b != []:
                        for x in b:
                            codeType[x] = 'blocktype'
                    factorList.append(codeType)
                    factorList.append([str(parValue[1]-50)]*lenFactor)
                elif 90 >= parValue[1]:                         #81~90之间是一致预期报表类型枚举值，详情可以查阅 FactorType.m
                    factorList.append(['rpttype']*lenFactor)
                    factorList.append([str(parValue[1]-80)]*lenFactor)
                elif 100 >= parValue[1]:                        # 90~100之间是一致预期数据处理方法枚举值，详情可以查阅 FactorType.m
                    factorList.append(['contype']*lenFactor)
                    factorList.append([str(parValue[1]-90)]*lenFactor)
    else:
        if 0 == dataExtractType:
            if True in [302 == x for x in factorValue]:         #针对货币资金/短期债务单独处理
                factorList.append(['reportType']*lenFactor)
                factorList.append(['1']*lenFactor)
        elif 2 == dataExtractType:
            factorList.append(['fcount']*lenFactor)
            factorList.append([str(dateList[1])]*lenFactor)         #默认当前代码类型是个股代码
            if True in [119 <= x <= 122 for x in factorValue]:    #针对收盘价分位数单独处理
                factorList.append(['priceType']*lenFactor)
                factorList.append(['1']*lenFactor)
        elif 3 <= dataExtractType:
            factorList.append(['stocktype']*lenFactor)
            factorList.append(['1']*lenFactor)         #默认当前代码类型是个股代码
            factorList.append(['rpttype']*lenFactor)
            factorList.append(['4']*lenFactor)         #默认处理报表为年报
            factorList.append(['contype']*lenFactor)
            factorList.append(['1']*lenFactor)         #默认处理方法为加权平均计算法
            factorList.append(['blocktype']*lenFactor)
            factorList.append(['4']*lenFactor)         #默认组合类型为行业组合
    #拼代码字符串
    jssblst = ','.join(stockList)
    jssblst = '['+jssblst.replace(',','],[')+']'
    jssblst = jssblst.replace('[','["')
    jssblst = '['+jssblst.replace(']','"]')+']'
    #拼查询条件字符串
    parNum = len(factorList)-1
    a = ['{"FACTOR":"']*lenFactor     #后面接因子名称
    b = ['","lstparam":[']*lenFactor
    c1 = ['{"PNAME":"']*lenFactor    #后面跟因子类型名称
    c2 = ['","PVALUE":"']*lenFactor    #后面跟因子类型值
    c3 = ['"}']*lenFactor
    d = [']}']*lenFactor
    if 0 < parNum:
        c=[]
        i=0
        while i < lenFactor:
            tc = ''
            j = 0
            while j < parNum:
                tc = tc + ''.join([c1[i],factorList[j+1][i],c2[i],factorList[j+2][i],c3[i]])+','
                j = j + 2
            tc = tc[0:-1]
            c.append(tc)
            i = i + 1
        e = [a,factorList[0],b,c,d]
        del c,i,j
    else:
        e = [a,factorList[0],b,d]
    f = list(map(list,zip(*e)))
    jsfactorlist = '['+','.join([''.join(x) for x in f])+']'
    del a,b,d,e,f,c1,c2,c3,parNum
    #查找开始时间和结束时间
    if 2 > dataExtractType:
        startTime = min(dateList)
        endTime   = max(dateList)
    elif 2 == dataExtractType:
        startTime = max(dateList)
        endTime   = 19700101
    else:
        startTime = max(dateList)
        endTime   = min(dateList)

    #传递参数获取数据
    parms = urllib.parse.urlencode({'apiparam':urlVersion,'userid':userid,'session':session,'ipaddr':ipaddr,'startdatetime':str(startTime),'enddatetime':str(endTime),'jssymbols':jssblst,'jsfactors':jsfactorlist})
    parms = parms.encode('utf-8')
    data = urllib.request.urlopen(url,parms)
    data = data.read().decode('utf-8')
    beginoffset = data.find(';')
    if 0 < beginoffset:
        data = ('[['+data[beginoffset+1:-1] +']]').replace(';','],[')
        data = data.replace('NaN','None')
        data = eval(data)
    else:
        return [],dateList,stockList

    dateList = sorted(list(set(dateList)))
    if 0 == dataExtractType:
        #初始化结果矩阵
        rData =[[None]]*lenFactor
        for i in range(lenFactor):
            rData[i] = [factorName[i]]
            rData[i].append([[None]*len(dateList) for i in range(len(stockList))])
        de = enumerate(dateList)
        for item in data:
            stindex = stockList.index(item[1])
            dtindex = [i for i,a in enumerate(dateList) if a==item[2]]
            if dtindex == []:
                continue
            for i in range(lenFactor):
                if item[0] == factorName[i]:
                    rData[i][1][stindex][dtindex[0]] = item[3]
                    break
    else:
        dateList = sorted(list(set([x[2] for x in data])))
        rData =[[None]]*lenFactor
        for i in range(lenFactor):
            rData[i] = [factorName[i]]
            rData[i].append([[None]*len(dateList) for i in range(len(stockList))])

        for item in data:
            stindex = stockList.index(item[1])
            dtindex = dateList.index(item[2])
            for i in range(lenFactor):
                if item[0] == factorName[i]:
                    rData[i][1][stindex][dtindex] = item[3]
                    break

    return rData,dateList,stockList


## Description:
#   本API用于查询日度财务指标指定股票列表的时间序列因子数据，或者横截面因子数据。通过输入股票列表、因子列表以及起止日期，输出不同因子类型下的因子数值。
## Inputs:
# 	stockList ： 股票代码列表，字符型cell列向量，例如：{‘000001.SZ’;’601688.SH’};
# 	factorList ： 因子名称列表，枚举列向量，例如：[Factors.high;Factors.low]。详情请见因子列表;
#   dateList:	数据日期列表，数值型列向量，格式 yyyymmdd,例如: [20100861;20100921]
#   publishDateType,	匹配日期类型，1：会计报表日期，2：公告披露日期，默认公告披露日期
#   factorPar： 财务报表类型，枚举值，默认为合并报表类型。需要查询特殊类型的指标时请用枚举定义引用，例如：FactorType.PARENT。
## Outputs:
#       factorData，因子数据，多维List，第一层是查询因子列表，第二层是因子名称及因子数值，第三层是因子数值二维List，其行为股票代码索引，列为日期索引。
#            因子数据矩阵的行索引、列索引请见stkCodeList、resultDateList两个数组。
#       stkCodeList, 股票代码列表，cell类型列向量
#       resultDateList,	查询结果日期列表，数值型列向量，格式 yyyymmdd,例如: [20100861,20100921]
def hdf(stockList=[], factorList=[], dateList=[], publishDateType=PublishDateType.PUBLISHDAY,factorPar=FactorType.COMBINED):
    if stockList == [] or factorList == [] or dateList == []:
        print('[hdf函数]参数stockList、factorList或dateList为空，请重新输入！')
        return
    if list != type(stockList):
        stockList = [stockList]
    if list != type(factorList):
        factorList = [factorList]
    if list != type(dateList):
        dateList = [dateList]
    if list != type(factorPar):
        factorPar = [factorPar]
    if factorPar != [] and False in [isinstance(x,FactorType) for x in factorPar]:
        print('[hdf函数]输入参数factorPar非正确类型，请重新输入！')
        return
    if factorList != [] and False in [isinstance(x,Factors) for x in factorList]:
        print('[hdf函数]输入参数factorList非正确类型，请重新输入！')
        return
    #判断查询类型
    factorList = list(set(factorList))
    lenFactor = len(factorList)
    dateList = sorted(list(set(dateList)))
    stockList = sorted(list(set(stockList)))
    factorName = [x.name for x in factorList]
    rData =[[None]]*lenFactor
    for i in range(lenFactor):
        rData[i] = [factorName[i]]
        rData[i].append([[None]*len(dateList) for i in range(len(stockList))])

    if PublishDateType.ACCOUNTINGDAY == publishDateType:              #匹配会计期间
        #根据输入的日期计算相应的会计时间
        quaterDate = getQuarterDay(dateList)
        #提取因子在每个会计期间数据
        factorData,tdate,stkCodeList = hfactor(stockList, factorList,quaterDate,factorPar)
        if factorData is None or factorData == []:
            return [],dateList,stkCodeList
        for item in range(len(factorData)):
            rData[item][0] = factorData[item][0]
            for s in range(len(stockList)):
                for d in range(len(tdate)):
                    for ritem in range(len(dateList)):
                        if quaterDate[ritem] == tdate[d]:
                            rData[item][1][s][ritem] = factorData[item][1][s][d]
    elif PublishDateType.PUBLISHDAY == publishDateType:             #匹配财务报表实际披露时间
        #有些报告披露在周末或节假日，需要用自然日期匹配。减去213天是消除0930到0430之间7个月一直不披露报告的极端情况
        date0=datetime.datetime.strptime(str(min(dateList)),'%Y%m%d') -datetime.timedelta(213)
        i=datetime.timedelta(1)
        date1 = []
        while i< datetime.timedelta(213):
            date1.append(int((date0+i).strftime('%Y%m%d')))
            i+=datetime.timedelta(1)
        date1 = date1 + dateList
        quaterDate = getQuarterDay(date1)
        #提取每个会计期间的披露日期
        publishDate,tdate,stkCodeList = hfactor(stockList, Factors.stm_issuingdate,quaterDate)
        if publishDate is None or publishDate == []:
            print('[hdf]财务报告披露日期为空')
            return [],dateList,stkCodeList
        #有些股票的报告披露日期缺失，只能用会计期间数据弥补
        for s in range(len(stkCodeList)):
            for d in range(len(tdate)):
                if publishDate[0][1][s][d] is None or publishDate[0][1][s][d] == "":
                    publishDate[0][1][s][d] = tdate[d]
                else:
                    publishDate[0][1][s][d] = int(publishDate[0][1][s][d])
        #提取因子在每个会计期间数据
        factorData,tdate,stkCodeList = hfactor(stockList, factorList,tdate,factorPar)
        if factorData is None or factorData == []:
            print('[hdf]因子数据为空')
            return [],dateList,stkCodeList
		
        for item in range(len(factorData)):
            rData[item][0] = factorData[item][0]
            for s in range(len(stockList)):
			    #该行若出现编译错误，请删除后重写一遍。（编辑器导致出错）
                predata = None	
                for d in range(len(publishDate[0][1][0])):
                    for ritem in range(len(dateList)):
                        if dateList[ritem] >= publishDate[0][1][s][d]:
                            if factorData[item][1][s][d] is not None:
                                rData[item][1][s][ritem] = factorData[item][1][s][d]
                                predata = factorData[item][1][s][d]
                            else:
                                rData[item][1][s][ritem] = predata
   #      factorData,None,stkCodeList = getPublishdateData(stockCodeList,resultDateList,factorList,factorPar)
    elif PublishDateType.TTM == publishDateType:             #按照披露日期计算的过去12个月财务数据
        #有些报告披露在周末或节假日，需要用自然日期匹配。减去213天是消除0930到0430之间7个月一直不披露报告的极端情况
        date0=datetime.datetime.strptime(str(min(dateList)),'%Y%m%d') -datetime.timedelta(722)
        i=datetime.timedelta(1)
        date1 = []
        while i< datetime.timedelta(722):
            date1.append(int((date0+i).strftime('%Y%m%d')))
            i+=datetime.timedelta(1)
        date1 = date1 + dateList
        quaterDate = getQuarterDay(date1)
        #提取每个会计期间的披露日期
        publishDate,tdate,stkCodeList = hfactor(stockList, Factors.stm_issuingdate,quaterDate)
        if publishDate is None or publishDate == []:
            print('[hdf]财务报告披露日期为空')
            return [],dateList,stkCodeList
        #有些股票的报告披露日期缺失，只能用会计期间数据弥补
        for s in range(len(stkCodeList)):
            for d in range(len(tdate)):
                if publishDate[0][1][s][d] is None:
                    publishDate[0][1][s][d] = tdate[d]
                else:
                    publishDate[0][1][s][d] = int(publishDate[0][1][s][d])
        #提取因子在每个会计期间数据
        factorData,accdate,stkCodeList = hfactor(stockList, factorList,tdate,factorPar)
        if factorData is None or factorData == []:
            print('[hdf]因子数据为空')
            return [],dateList,stkCodeList
        for item in range(len(factorData)):
            rData[item][0] = factorData[item][0]
            for s in range(len(stockList)):
                for d in range(len(publishDate[0][1][0])):
                    for ritem in range(len(dateList)):
                        if dateList[ritem] >= publishDate[0][1][s][d]:
                            quaterDate = accdate[d] - math.floor(accdate[d]/10000)*10000
                            if quaterDate == 1231:
                                rData[item][1][s][ritem] = factorData[item][1][s][d]
                            elif quaterDate == 930:
                                rData[item][1][s][ritem] = factorData[item][1][s][d] + factorData[item][1][s][d-3] - factorData[item][1][s][d-4]
                            elif quaterDate == 630:
                                rData[item][1][s][ritem] = factorData[item][1][s][d] + factorData[item][1][s][d-2] - factorData[item][1][s][d-4]
                            elif quaterDate == 331:
                                rData[item][1][s][ritem] = factorData[item][1][s][d] + factorData[item][1][s][d-1] - factorData[item][1][s][d-4]
    return rData,dateList,stockList

#计算给定日期列表的会计期间
def getQuarterDay(dateList=[]):
    quaterDate = [None]*len(dateList)
    for i in range(len(dateList)):
        dateyear = math.floor(dateList[i]/10000)
        datequater = math.ceil(math.floor((dateList[i] - dateyear*10000)/100)/3)
        if datequater == 1:
            quaterDate[i]=(dateyear-1)*10000+1231
        elif  datequater == 2:
            quaterDate[i]=dateyear*10000+331
        elif  datequater == 3:
            quaterDate[i]=dateyear*10000+630
        elif  datequater == 4:
            quaterDate[i]=dateyear*10000+930
    return  quaterDate
